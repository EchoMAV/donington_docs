{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"EchoMAV Documentation","text":"<p>Welcome to the EchoMav Technical Library. Please find the quick links below to get started:</p> <p>EchoPilot AI Hardware Overview </p> <p>Building ArduPilot for the EchoPilot AI</p> <p>Building PX4 for the EchoPilot AI</p> <p>Building L4T (Xavier NX) for the EchoPilot AI</p> <p>Building L4T (Nano) for the EchoPilot AI</p>"},{"location":"build_ardupilot/","title":"Building ArduPilot","text":""},{"location":"build_ardupilot/#building-and-loading-ardupilot-firmware","title":"Building and Loading ArduPilot Firmware","text":"<p>As of ArduPilot 4.4, the EchoPilot AI hardware definition files are not yet pulled into the ArduPilot repository. Therefore, if you wish to use ArduPilot firmware on the EchoPilot AI, you will need to follow the steps below and build ArduPilot from source. Fortunately the process is straightforward:</p>"},{"location":"build_ardupilot/#prerequisites","title":"Prerequisites","text":"<p>These instructions were tested on Ubuntu 20.04 LTS. They are not guaranteed to work on any other flavor of Linux, within a virtual machine or under WSL 1 or 2. We recommend a physical machine running Ubuntu 20.04 LTS for the most pain-free experience.</p>"},{"location":"build_ardupilot/#download-ardupilot","title":"Download ArduPilot","text":"<p>These instructions will install ArduPilot in <code>~/ardupilot</code>. If you wish to use a different location, please adjust the directory below and throughout these instructions. If you are a novice, we recommend proceeding exactly as described below. <pre><code>cd ~\ngit clone --recurse-submodules https://github.com/ArduPilot/ardupilot\ncd ardupilot\n</code></pre></p>"},{"location":"build_ardupilot/#setup-the-toolchain","title":"Setup the toolchain","text":"<p><pre><code>Tools/environment_install/install-prereqs-ubuntu.sh -y\n</code></pre> Now reload the path (log-out and log-in to make permanent) <pre><code>. ~/.profile\n</code></pre></p>"},{"location":"build_ardupilot/#checkout-a-release-or-tag","title":"Checkout a release or tag","text":"<p>You can identify a version you wish to build by looking at the ArduPilot tags https://github.com/ArduPilot/ardupilot/tags. In the example below, we will demonstrate checking out release ArduCopter-stable </p> <pre><code>git checkout tags/ArduCopter-stable\ngit submodule update --init --recursive\n</code></pre> <p>Warning</p> <p>We have observed a failure to identify I2C compasses on ArduPilot 4.3 releases. If your design relies on the RM3100 compass onboard the EchoPilot AI, we recommend avoiding version 4.3.x. This problem appears to have been fixed in 4.4+ releases. We recommend using version 4.2.4 or earlier, or 4.4+.</p>"},{"location":"build_ardupilot/#do-a-test-build","title":"Do a test build","text":"<p>Before we build firmware for the EchoPilot AI board, it is wise to first build a native target to verify that your toolchain and environment is setup and working. Build the sitl (software in the loop simulator) target first: <pre><code>./waf configure --board sitl\n./waf copter\n</code></pre> If the build completes without errors, congrats! If there are errors, you will need to resolve them before proceeding.</p>"},{"location":"build_ardupilot/#download-and-install-the-hardware-definition-files-for-ardupilot","title":"Download and Install the Hardware Definition Files for ArduPilot","text":"<p>Obtain the hardware board files from the EchoPilot AI BSP repo and checkout the appropriate branch matching the hardware revision of your EchoPilot AI using the commands below. The Hardware revision is marked on the board silkscreen near the FAN connector:</p> <pre><code>git clone https://github.com/EchoMAV/echopilot_ai_bsp\ncd echopilot_ai_bsp\ngit checkout board_revision_0     # Select the appropriate revision\n</code></pre> <p>Warning</p> <p>Be sure you checked out the appropriate branch matching your EchoPilot AI hardware revision!</p> <p>Install the ArduPilot board definition files into the correct folder using the provided <code>install_ardupilot.sh</code> script. The first argument is the path to where you have the ardupilot repo on your system, e.g. <code>~/ardupilot</code>. <pre><code>./install_ardupilot.sh ~/ardupilot\n</code></pre></p>"},{"location":"build_ardupilot/#build-ardupilot-for-the-echopilot-ai","title":"Build ArduPilot for the EchoPilot AI","text":"<p>At this point, you should have the hardware files located in <code>~/ardupilot/libraries/AP_HAL_ChibiOS/hwdef/EchoPilotAI/</code>. To build firmware targeting this board, use the command: <pre><code>cd ~/ardupilot\n./waf configure --board EchoPilotAI\n./waf copter    # or choose a different target\n</code></pre></p> <p>Tip</p> <p>The example above builds copter, for other vehicle targets, see below: <pre><code>./waf copter                            # All multirotor types\n./waf heli                              # Helicopter types\n./waf plane                             # Fixed wing airplanes including VTOL\n./waf rover                             # Ground-based rovers and surface boats\n./waf sub                               # ROV and other submarines\n</code></pre></p> <p>The arducopter.apj and arducopter.bin file will be located in the <code>~/ardupilot/build/EchoPilotAI/bin/</code> folder. The firmware is now ready to be loaded on the board. This can be done by adding the upload argument, or with a ground control station. </p> <p>Info</p> <p>If the EchoPilot AI is plugged in to your host computer, unplug it before proceeding. The board should be totally powered off before proceeding.</p>"},{"location":"build_ardupilot/#uploading-using-the-waf-script","title":"Uploading using the WAF script","text":"<p><pre><code>./waf copter --upload\n</code></pre> When the build completes, the system will wait for a USB connection from the EchoPilot AI's bootloader. You should see a message indicating <code>waiting for the bootloader...</code>. At this point, plug in a USB-A to USB-C cable between the host computer and the FMU USB connection on the EchoPilot AI. The board should be recognized and the firmware will be uploaded automatically.</p>"},{"location":"build_ardupilot/#upload-using-qgroundcontrol","title":"Upload using QGroundControl","text":"<p>Optionally, you can use QGroundControl to upload the <code>~/ardupilot/build/EchoPilotAI/bin/arducopter.apj</code> file created previously. This is especially useful if you wish to send a firmware update to a customer as they can do it without terminal access. Follow the steps to upload Custom Firmware using QGroundControl: https://docs.qgroundcontrol.com/master/en/SetupView/Firmware.html</p>"},{"location":"build_px4/","title":"Building PX4","text":""},{"location":"build_px4/#building-and-loading-px4-firmware","title":"Building and Loading PX4 Firmware","text":"<p>As of PX4 1.13.3, the EchoPilot AI hardware definition files are not yet pulled into the PX4 repository. Therefore, if you wish to use PX4 firmware on the EchoPilot AI, you will need to follow the steps below and build PX4 from source. Fortunately the process is straightforward:</p>"},{"location":"build_px4/#prerequisites","title":"Prerequisites","text":"<p>These instructions were tested on Ubuntu 20.04 LTS. They are not guaranteed to work on any other flavor of Linux, within a virtual machine or under WSL 1 or 2. We recommend a physical machine running Ubuntu 20.04 LTS for the most pain-free experience.</p>"},{"location":"build_px4/#download-px4","title":"Download PX4","text":"<p>These instructions will install PX4 in <code>~/PX4-Autopilot</code>. If you wish to use a different location, please adjust the directory below and throughout these instructions. If you are a novice, we recommend proceeding exactly as described below. <pre><code>cd ~\ngit clone https://github.com/PX4/PX4-Autopilot.git --recursive\ncd PX4-Autopilot\n</code></pre></p>"},{"location":"build_px4/#setup-the-toolchain","title":"Setup the toolchain","text":"<p>Note if you have built PX4 before, you can likely skip this step. Also remove the <code>--no-sim-tools</code> option if you wish to install the simulation toolchain. <pre><code>bash ./Tools/setup/ubuntu.sh --no-sim-tools\n</code></pre></p>"},{"location":"build_px4/#checkout-a-release","title":"Checkout a release","text":"<p>You can identify a version you wish to build by looking at the release history https://github.com/PX4/PX4-Autopilot/releases. In the example below, we will demonstrate checking out release 1.13  </p> <p>Info</p> <p>You can reuse an existing repo rather than cloning a new one if this isn't your first PX4 rodeo. In this case, clean the build environment before proceeding: <pre><code>make clean\nmake distclean\n</code></pre></p> <p><pre><code>git fetch origin release/1.13\ngit checkout release/1.13\n</code></pre> Update submodules: <pre><code>make submodulesclean\n</code></pre></p>"},{"location":"build_px4/#do-a-test-build","title":"Do a test build","text":"<p>Before we build firmware for the EchoPilot AI board, it is wise to first build a native target to verify that your toolchain and environment is setup and working. Build the px4_sitl (software in the loop simulator) first: <pre><code>make px4_sitl\n</code></pre> If the build completes without errors, congrats! If there are errors, you will need to resolve them before proceeding.</p>"},{"location":"build_px4/#build-px4-for-the-echopilot-ai","title":"Build PX4 for the EchoPilot AI","text":"<p>First obtain the hardware board files from the EchoPilot AI BSP repo and checkout the appropriate branch matching the hardware revision of you EchoPilot AI. The HW Revision is marked on the board silkscreen near the FAN connector:</p> <pre><code>git clone https://github.com/EchoMAV/echopilot_ai_bsp\ncd echopilot_ai_bsp\ngit checkout board_revision_0   # Change per your hardware\n</code></pre> <p>Warning</p> <p>Be sure you checked out the appropriate branch matching your EchoPilot AI hardware revision!</p> <p>Use the provided install script <code>install_px4.sh</code> to place the PX4 board definition files into the correct folder. The first argument is the path to where you have the ardupilot repo on your system, e.g. <code>~/PX4-Autopilot</code>: <pre><code>./install_px4.sh ~/PX4-Autopilot\n</code></pre> At this point, you should have the hardware files located in <code>~/PX4-Autopilot/boards/echomav/echopilot-ai/</code>. To build firmware targeting this board, use the command: <pre><code>make echomav_echopilot-ai\n</code></pre> The .px4 file will be located in the <code>~/PX4-Autopilot/build/echomav_echopilot-ai_default/</code> folder. The firmware is now ready to be loaded on the board.  </p> <p>Info</p> <p>If the EchoPilot AI is plugged in to your host computer, unplug it before proceeding. The board should be totally powered off before proceeding.</p> <p><pre><code>make echomav_echopilot-ai upload\n</code></pre> When the build completes, the system will wait for a USB connection from the EchoPilot AI's bootloader. You should see a message indicating <code>waiting for the bootloader...</code>. At this point, plug in a USB-A to USB-C cable between the host computer and the FMU USB connection on the EchoPilot AI. The board should be recognized and the firmware will be uploaded automatically.</p> <p>Optionally, you can use QGroundControl to upload the <code>~/PX4-Autopilot/build/echomav_echopilot-ai_default/echomav_echopilot-ai_default.px4</code> file created previously. This is especially useful if you wish to send a firmware update to a customer as they can do it without terminal access. Follow the steps here to upload Custom Firmware using QGroundControl: https://docs.px4.io/main/en/config/firmware.html</p>"},{"location":"compile_l4t/","title":"Compiling L4T for the Xavier NX on the EchoPilot AI","text":""},{"location":"compile_l4t/#instructions-for-customizing-the-device-tree-and-compiling-the-kernel-for-the-xavier-nx-on-echopilot-ai","title":"Instructions for customizing the device tree and compiling the kernel for the Xavier NX on EchoPilot AI","text":"<p>When a Jetson Xavier NX module is included with an EchoPilot AI purchase, it is flashed with a custom Linux for Tegra (L4T) image which includes support for the hardware and pin configuration of the EchoPilot AI. If you wish to build/update the kernel for use with the EchoPilot AI, the instructions below will provide the information and files you need to ensure your custom image remains fully compatible with the EchoPilot AI hardware. When compared to a standard Nvidia development carrier board, the primary differences in the EchoPilot AI hardware are:</p> <ol> <li>The EchoPilot AI does not have an I2C HDMI controller</li> <li>The EchoPilot AI has an SD Card (SDMMC3)</li> </ol> <p>To minimize console errors due to (1) and to enable the SD card on SDMMC3, the kernel must be compiled from source and flashed to the Xavier NX using the Debug USB port and recovery mode. It is not possible to update only the dtb files because the pinmux changes require a full flash. The following instructions will walk you through the process.</p> <p>Warning</p> <p>These instructions were developed and tested on Ubuntu 20.04 LTS (with a Windows machine used for the Excel pinmux change). We recommend using a physical machine running Ubuntu 20.04 LTS.</p> <p>These instructions assume you are using a Production Jetson SOM. These instructions will not work with the SOM included with a Jetson developer kit. </p> <p>What you will doing:</p> <ol> <li>Download and setup the necessary files</li> <li>Replace .dtb and .cfg files, and create a extlinux.conf file</li> <li>Generate the image and flash the device</li> </ol> <p>So buckle up and let's get started.</p> <p>These instructions are adapted from the the excellent document by Hao Ye availabe on medium.com along with documentation pulled from Nvidia's forums. Some minor changes are include from Hao Ye's document, most likely as it was created for an older L4T release (32.6.1).</p>"},{"location":"compile_l4t/#download-and-setup-necessary-files","title":"Download and Setup Necessary Files","text":"<p>Note that you will need to create an NVIDIA developer account and login to download, so if you do not have a developer account please set that up before proceeding.  Next you will need to download three packages from Nvidia: Driver Package (BSP), Sample Root Filesystem and Driver Package (BSP) Sources. </p> <p>These instructions were developed using Jetson Linux 35.3.1. These instructions may continue to work for future releases,   but proceed with caution.</p> <p>The files to download are highlighted in blue below: </p> <p>The instructions below assume that the downloaded files are downloaded to the <code>~/Downloads/</code> folder.  </p>"},{"location":"compile_l4t/#extract-driver-package-bsp","title":"Extract Driver Package (BSP)","text":"<p>Note: the filename below will be different if you download a different version.</p> <pre><code>mkdir -p ~/XavierNX\ntar -xf ~/Downloads/Jetson_Linux_R35.3.1_aarch64.tbz2 -C ~/XavierNX\n</code></pre>"},{"location":"compile_l4t/#extract-kernel-sources-driver-package-bsp-sources","title":"Extract kernel sources (Driver Package (BSP) Sources)","text":"<p>In the public_sources.tbz2 (BSP sources) zip file, there will be many other zipped files inside, but we are only interested in kernel_src.tbz2. Extract this file into a folder to named <code>sources</code> within the <code>Linux_for_Tegra</code> folder. The steps are: <pre><code>mkdir ~/Downloads/temp\ntar -xf ~/Downloads/public_sources.tbz2 -C ~/Downloads/temp\nmkdir ~/XavierNX/Linux_for_Tegra/sources\nsudo tar -xf ~/Downloads/temp/Linux_for_Tegra/source/public/kernel_src.tbz2 -C ~/XavierNX/Linux_for_Tegra/sources\ncd ~/Nano/Linux_for_Tegra\nsudo ./source_sync.sh -t tegra-l4t-r35.3.1   # Change the tag to the same version you are building\n</code></pre></p>"},{"location":"compile_l4t/#extract-sample-root-file-system-sample-root-filesystem","title":"Extract sample Root File System  (Sample Root Filesystem)","text":"<p>Extract contents into Linux_for_Tegra/rootfs/. Note the filename below will be different if you downloaded a different version. <pre><code>mkdir ~/XavierNX/Linux_for_Tegra/rootfs\nsudo tar -xf ~/Downloads/Tegra_Linux_Sample-Root-Filesystem_R35.3.1_aarch64.tbz2 -C ~/XavierNX/Linux_for_Tegra/rootfs/\nsudo ./apply_binaries.sh\n</code></pre></p> <p>Note</p> <p>Before \u201capply_binaries.sh\u201d is run, the content in \u201cLinux_for_Tegra/rootfs/\u201d is purely Ubuntu. After \u201capply_binaries.sh\u201d the \u201crootfs/\u201d will contain NVIDIA content, e.g, drivers for the GPU and some firmware.</p>"},{"location":"compile_l4t/#get-the-echopilot-dtb-cfg-and-extlinuxconf-files","title":"Get the EchoPilot .dtb, .cfg and extlinux.conf files","text":"<p>The files you will need to replace include the device tree binary (.dtb), pinmux configuration (.cfg) and extlinux.conf files. These files can be obtained from the echopilot_dtb_pinmux repository https://github.com/EchoMAV/echopilot_ai_bsp. Use the steps below to clone and install these files:</p> <p>Clone the files: <pre><code>cd ~\ngit clone https://github.com/EchoMAV/echopilot_ai_bsp\ncd echopilot_ai_bsp\n</code></pre> Checkout the appropriate branch for your EchoPilot AI board revision. For example, EchoPilot AI rev0 hardware: <pre><code>git checkout board_revision_0\n</code></pre> Run the install script to copy the cfg, dtb and extlinux.conf files into your Linux_for_Tegra folder. The usage is <code>./install_l4t_xavier_nx.sh [Path to Linux_for_Tegra]</code>, e.g.: <pre><code>./install_l4t_xavier_nx.sh ~/XavierNX/Linux_for_Tegra/\n</code></pre> Ensure this script completes with no errors before proceeding with flashing.</p>"},{"location":"compile_l4t/#flash-device","title":"Flash device","text":"<p>Important</p> <p>While not shown in the images below. The EchoPilot AI should be plugged into a Carrier Board for these steps, as that is how the Jetson module is powered. </p> <ol> <li>Plug in a usb cable (this will require a JST-GH to micro usb female adapter for Rev0 boards) to the Jetson Debug port (J25) on the EchoPilot AI. Rev 0 is shown below to help you locate this connector. Note: future versions of hardware may use a USB micro connector for J25 rather than a JST-GH connector. </li> <li>Hold the recovery button down. (see image below for location of the recovery button). </li> <li>Apply power, and release recovery button after a few seconds.</li> <li>Flash device:</li> </ol> <pre><code>cd ~/Nano/Linux_for_Tegra/\nsudo ./flash.sh jetson-xavier-nx-devkit-emmc mmcblk0p1\n</code></pre>"},{"location":"compile_l4t_nano/","title":"Compiling L4T for the Jetson Nano on the EchoPilot AI","text":""},{"location":"compile_l4t_nano/#instructions-for-customizing-the-device-tree-and-compiling-the-kernel-for-the-nano-on-echopilot-ai","title":"Instructions for customizing the device tree and compiling the kernel for the Nano on EchoPilot AI","text":"<p>When a Jetson Nano module is included with an EchoPilot AI purchase, it is flashed with a custom Linux for Tegra (L4T) image which includes support for the hardware and pin configuration of the EchoPilot AI. If you wish to build/update the kernel for use with the EchoPilot AI, the instructions below will provide the information and files you need to ensure your custom image remains fully compatible with the EchoPilot AI hardware. When compared to a standard Nvidia development carrier board, the primary differences in the EchoPilot AI hardware are:</p> <ol> <li>The EchoPilot AI does not have an I2C HDMI controller</li> <li>The EchoPilot AI has an SD Card (SDMMC3)</li> </ol> <p>To minimize console errors due to (1) and to enable the SD card on SDMMC3, the kernel must be compiled from source and flashed to the Nano using the Debug USB port and recovery mode. The following instructions will walk you through the process.</p> <p>Warning</p> <p>These instructions were developed and tested on Ubuntu 20.04 LTS (with a Windows machine used for the Excel pinmux change). We recommend using a physical machine running Ubuntu 20.04 LTS.</p> <p>These instructions assume you are using a Production Jetson Nano P3448_0002 SOM. These instructions will not work with the SOM included with a Jetson Nano developer kit. </p> <p>What you will doing:</p> <ol> <li>Download and setup the necessary files</li> <li>Replace .dtb and create a extlinux.conf file</li> <li>Generate the image and flash the device</li> </ol> <p>So buckle up and let's get started.</p> <p>_These instructions are adapted from the the excellent document by Ridge Run How to build NVIDIA Jetson Nano kernel along with documentation pulled from Nvidia's forums. Some minor changes are included from this document because the last update was for LT4 32.3.1.</p> <p>Note that Nvidia has dropped software support for the Nano as it ends </p>"},{"location":"compile_l4t_nano/#download-and-setup-necessary-files","title":"Download and Setup Necessary Files","text":"<p>Note that you will need to create an NVIDIA developer account and login to download, so if you do not have a developer account please set that up before proceeding.  Next you will need to download three packages from Nvidia: Driver Package (BSP), Sample Root Filesystem and Driver Package (BSP) Sources. </p> <p>These instructions were developed using Jetson Linux 32.7.3, you can not use releases beyond 32.7.x as the Nano is no longer supported by Nvidia for newer software releases.</p> <p>The files to download are highlighted in blue below: </p> <p>Note</p> <p>The instructions below assume that the downloaded files are downloaded to the <code>~/Downloads/</code> folder.  </p>"},{"location":"compile_l4t_nano/#extract-driver-package-bsp","title":"Extract Driver Package (BSP)","text":"<p>Note: the filename below will be different if you download a different version.</p> <pre><code>mkdir -p ~/Nano\ntar -xf ~/Downloads/Jetson_Linux_R32.7.3_aarch64.tbz2 -C ~/Nano\n</code></pre>"},{"location":"compile_l4t_nano/#extract-kernel-sources-driver-package-bsp-sources","title":"Extract kernel sources (Driver Package (BSP) Sources)","text":"<p>In the public_sources.tbz2 (BSP sources) zip file, there will be many other zipped files inside, but we are only interested in kernel_src.tbz2. Extract this file into a folder to named <code>sources</code> within the <code>Linux_for_Tegra</code> folder. The steps are: <pre><code>mkdir ~/Downloads/temp\ntar -xf ~/Downloads/public_sources.tbz2 -C ~/Downloads/temp\nmkdir ~/Nano/Linux_for_Tegra/sources\nsudo tar -xf ~/Downloads/temp/Linux_for_Tegra/source/public/kernel_src.tbz2 -C ~/Nano/Linux_for_Tegra/sources\ncd ~/Nano/Linux_for_Tegra\nsudo ./source_sync.sh -t tegra-l4t-r32.7.3\n</code></pre></p>"},{"location":"compile_l4t_nano/#extract-sample-root-file-system-sample-root-filesystem","title":"Extract sample Root File System  (Sample Root Filesystem)","text":"<p>Extract contents into Linux_for_Tegra/rootfs/.  <pre><code>mkdir ~/Nano/Linux_for_Tegra/rootfs\nsudo tar -xf ~/Downloads/Tegra_Linux_Sample-Root-Filesystem_R32.7.3_aarch64.tbz2 -C ~/Nano/Linux_for_Tegra/rootfs/\nsudo ./apply_binaries.sh\n</code></pre></p> <p>Note</p> <p>Before \u201capply_binaries.sh\u201d is run, the content in \u201cLinux_for_Tegra/rootfs/\u201d is purely Ubuntu. After \u201capply_binaries.sh\u201d the \u201crootfs/\u201d will contain NVIDIA content, e.g, drivers for the GPU and some firmware.</p>"},{"location":"compile_l4t_nano/#get-the-echopilot-dtb-cfg-and-extlinuxconf-files","title":"Get the EchoPilot .dtb, .cfg and extlinux.conf files","text":"<p>The files you will need to replace include the device tree binary (.dtb) and extlinux.conf files. These files can be obtained from the echopilot_ai_bsp repository https://github.com/EchoMAV/echopilot_ai_bsp. Use the steps below to clone and install these files:</p> <p>Clone the files: <pre><code>cd ~\ngit clone https://github.com/EchoMAV/echopilot_ai_bsp\ncd echopilot_ai_bsp\n</code></pre> Checkout the appropriate branch for your EchoPilot AI board revision. For example, EchoPilot AI rev0 hardware: <pre><code>git checkout board_revision_0\n</code></pre> Run the install script to copy the dtb and extlinux.conf files into your Linux_for_Tegra folder. The usage is <code>./install_l4t_nano.sh [Path to Linux_for_Tegra]</code>, e.g.: <pre><code>sudo ./install_l4t_nano.sh ~/Nano/Linux_for_Tegra/\n</code></pre> Ensure this script completes with no errors before proceeding with flashing.</p>"},{"location":"compile_l4t_nano/#flash-device","title":"Flash device","text":"<p>Important</p> <p>While not shown in the images below. The EchoPilot AI should be plugged into a Carrier Board for these steps, as that is how the Jetson module is powered. </p> <ol> <li>Plug in a usb cable (this will require a JST-GH to micro usb female adapter for Rev0 boards) to the Jetson Debug port (J25) on the EchoPilot AI. Rev 0 is shown below to help you locate this connector. Note: future versions of hardware may use a USB micro connector for J25 rather than a JST-GH connector. </li> <li>Hold the recovery button down. (see image below for location of the recovery button). </li> <li>Apply power, and release recovery button after a few seconds.</li> <li>Flash device:</li> </ol> <pre><code>cd ~/XavierNX/Linux_for_Tegra/\nsudo ./flash.sh jetson-nano-emmc mmcblk0p1\n</code></pre>"},{"location":"echopilot_ai/","title":"EchoPilot AI Documentation","text":""},{"location":"echopilot_ai/#overview","title":"Overview","text":"<p>The EchoPilot AI is a highly integrated vehicle control and edge computing system designed to power next-generation uncrewed systems. The EchoPilot AI supports computer vision, machine learning, autonomy, artificial intelligence and other advanced edge computing needs. The EchoPilot AI implements a STM32H7-based autopilot compatible with the popular Ardupilot and PX4 projects, and uses Pixhawk open-hardware connectivity standards. </p> <p>The power of  an advanced autopilot is seamlessly combined with high-performance computing (including AI and machine learning), IP networking, cloud connectivity and flexible low-latency hardware accelerated video encoding.</p> <p></p> <p>Autopilot Sensors</p> Rev 0Rev 1 Function Part Number IMU 1 ICM42688P IMU 2 ICM42688P IMU 3 ICM42688P Barometer 1 MS5611 Magentometer PNI RM3100 Add-On INS VectorNAV VN-X00 (optional) Function Part Number IMU 1 ICM42688P IMU 2 ICM42688P IMU 3 ICM42688P Barometer 1 ICP-20100 Barometer 2 ICP-20100 Magentometer PNI RM3100 Add-On INS VectorNAV VN-X00 (optional) <p>The hardware is configured into a two board stack. The upper board is the EchoPilot AI board, and it contains the flight management unit, peripherals, sensors and Nvidia Jetson interface. The lower board is the Carrier Board, and it handles power regulation and connectors. Two high-density FX23L-80S-0.5SV 80-pin board-to-board connectors are used between the two boards.</p> <p>This design philosophy achieves multiple goals:</p> <ol> <li>For integrated vehicle solutions, it is often desired to design a custom carrier board to add additional components, minimize cables/wiring and integrate power distribution. The EchoPilot AI's design allows you to optionally design a custom carrier board (using the provided Carrier Board as a reference design).</li> <li>A stacked solution minimizes X-Y size in exchange for moving into the Z axis, which is an acceptable compromise for most uncrewed vehicles.</li> <li>Moving the switching power regulators to the Carrier board reduces noise near the sensitive sensors on EchoPilot AI board and reduces the thermal load of the EchoPilot AI mainboard.</li> <li>A stacked design is more future proof, as peripherals can often be added to the Carrier Board without a re-design of the EchoPilot AI main board.</li> </ol>"},{"location":"echopilot_ai/#quick-start-guide","title":"Quick Start Guide","text":""},{"location":"echopilot_ai/#accessing-the-jetson-via-the-console","title":"Accessing the Jetson via the console","text":"<p>These instructions assume you have a Jetson module that is already flashed. If you have a new Jetson module that is not flashed, please see Building and Flashing a Jetson with L4T instructions.</p> <p>Warning</p> <p>Do not run the Jetson SOM without a heatsink. The module may be damaged or performance throttled. See connecttech.com for recommended active and passive heatsinks.</p> <ol> <li>Assemble the EchoPilot AI board with a Carrier Board, using 8mm standoffs between the two boards.</li> <li>If a Jetson Module is not already installed in the EchoPilot AI, install the module now.</li> <li>Attached a USB cable between your host computer and J7 (Console) on the Carrier Board </li> <li>In step 3, your host computer should have enumerated a virtual comm port. You will now need to find the name of the port.</li> </ol> <p>Info</p> <p>On Windows: Open Device Manager (Start \u2192 Control Panel \u2192 Hardware and Sound \u2192 Device Manager) Look in the Device Manager list, open the category \"Ports\", and note the COM port added USB Serial Port (COM?) (e.g., COM10). On Linux: Run <code>dmesg -w</code> and then plug in unplug and replug in the USB cable. You should see the name of the device added, typically <code>FTDI USB Serial device converter now attached to ttyUSB?</code> (e.g., ttyUSB0). </p> <p>Use a terminal program to connect to the Jetson's console at 115200 baud, 8N1. </p> <p>Info</p> <p>On Windows: We recommend Putty or TeraTerm. On Linux: We recommend Picocom. Install with <code>sudo apt-get install picocom</code>. Use with <code>picocom /dev/ttyUSB? -b 115200</code>. To exit picocom, use <code>Ctrl-a Ctrl-x</code>.</p> <p>Power the Carrier Board with 7-56VDC source capable of supplying up to 4A.</p> <p>Warning</p> <p>If using a bench supply with over-current protection, we recommend turning it OFF. The boot process requires short bursts of high current and over-current protection on some supplies will result in a failed boot.</p> <p>You should now see the boot messages in your console, and once boot is complete, you will see a login prompt.</p> <p>Note</p> <p>The default username is echopilot and the default password is echopilot</p> <p>Success</p> <p>At this point you are logged into the Jetson and can begin configuring the network, installing applications, etc.</p>"},{"location":"echopilot_ai/#connecting-to-the-fmu-via-the-usb-connector","title":"Connecting to the FMU via the USB connector","text":"<ol> <li>Attach a USB cable between the host computer and the FMU USB connector (J7).</li> <li>Start a ground control application on the host computer such as QGroundControl or Mission Planner.</li> </ol> <p>Info</p> <p>QGroundControl: Will automatically connect. Mission Planner: Select the appropriate COM port at the top right, 115200, then click CONNECT.</p>"},{"location":"echopilot_ai/#board-components-and-connectors","title":"Board Components and Connectors","text":""},{"location":"echopilot_ai/#echopilot-ai","title":"EchoPilot AI","text":""},{"location":"echopilot_ai/#carrier-board","title":"Carrier Board","text":""},{"location":"echopilot_ai/#pinouts","title":"Pinouts","text":"<p>For EchoPilot AI Pinouts, refer to the EchoPilot AI Pinout Page.  </p> <p>For Carrier Board Pinouts, refer to the Carrier Board Pinout Page.</p>"},{"location":"echopilot_ai/#jetson-io-availability","title":"Jetson IO Availability","text":"<p>The following Jetson IO pins are brought out to the B2B connector J5 and are available for customer use:</p> <p>Note</p> <p>*Changes to the direction and functionality of these pins may be possible based on the Jetson pinmux configuration.</p> Jetson Pin Direction B2B (J5) Voltage Default Use Pin Description (Xavier) Pin Description (Nano) PIN 211 O 36 +1.8V Audio MCLK AUDIO_MCLK AUDIO_MCLK PIN 212 IO 38 +1.8V Spare IO GPIO3_PQ.01 GPIO3_PV.01 PIN 218 IO 37 +1.8V Spare IO GPIO3_PCC.04 GPIO3_PY.02 PIN 126 I 74 +3.3V* Iridium Ring GPIO3_PCC.00 GPIO3_PI.02 PIN 206 I 73 +3.3V* Iridium NA GPIO3_PR.00 GPIO3_PV.00 <p>Note</p> <p>*Pins 126 and 206 are level-shifted from 1.8V to 3.3V prior to the B2B (J5) connector via a TXS0108ERGYR level translator.</p> <p>The following Jetson IO is used internally by the EchoPilot AI:</p> <p>Warning</p> <p>*Changes to the pinmux affecting these pins may break functionality.</p> Jetson Pin Direction Voltage Use Pin Description (Xavier) Pin Description (Nano) PIN 87 Pwr 5V Vbus Detect USB_VBUS_EN0 USB_VBUS_EN0 PIN 128 O +1.8V SD Card Enable GPIO3_PCC.02 GPIO3_PH.07 PIN 130 O +1.8V Camera Mux GPIO3_PCC.03 GPIO3_PI.00 PIN 208 I +1.8V SD Card Detect GPIO3_PQ.02 GPIO3_PZ.02 <p>The following Jetson IO pins are brought out to the FAN (J38) connector:</p> Jetson Pin Direction Voltage Use Pin Description (Xavier) Pin Description (Nano) PIN 230 O +5V Fan PWM GP_PWM6 PM3_PWM3 PIN 127 I +5V Fan Tach GPIO3_PQ.02 GPIO3_PI.01"},{"location":"echopilot_ai/#mechanical-drawings-and-step-files","title":"Mechanical Drawings and STEP Files","text":"With Carrier Board Attached EchoPilot AI without a Carrier Board Attached <p>EchoPilot AI 3D Model (STEP) File Download (right click, save link as)</p> <p>EchoPilot AI Universal Carrier Board 3D model (STEP) File Download (right click, save link as)</p> <p>EchoPilot AI PWM Breakout Board 3D model (STEP) File Download (right click, save link as)</p>"},{"location":"echopilot_ai/#notes-on-vibration-isolation","title":"Notes on Vibration Isolation","text":"<p>Many commercial autopilots use foam vibration isolation on a daughterboard containing the IMUs. You'll notice the EchoPilot AI does not use this type of design and the IMUs are mounted directly to the circuit board. The reason for this is that we feel better vibration isolation can be achieved (if required) by leveraging the mass of the entire EchoPilot system (carrier board, main board and Jetson SOM) rather than the very small mass of an IMU daughterboard. For the types of vibrations encountered by large-prop multi-rotors and piston-based engines (50-90 Hz), the total mass of the EchoPilot system mounted on vibration silicone isolators or wire rope isolators are very effective. This design has the added benefits of protecting critical electronics from exposure to continuous vibrations.  </p> <p>Note</p> <p>Note that for small and medium multi-rotors and electric planes, electric quadplanes and other vehicle types, vibration isolation is very rarely needed. </p>"},{"location":"echopilot_ai/#using-the-sd-card","title":"Using the SD Card","text":"<p>The SD card supports hot-plugging. When connected, <code>/dev/mmcblk1p1</code> should be found by the operating system. To mount this drive to a directory (e.g., <code>/sdcard</code>) use the following command: <pre><code>mkdir /sdcard\nsudo mount /dev/mmcblk1p1 /sdcard\n</code></pre> To unmount it: <pre><code>sudo umount /dev/mmcblk1p1 /sdcard\n</code></pre></p>"},{"location":"echopilot_ai/#configure-the-network","title":"Configure the Network","text":"<p>Linux for Tegra uses networkmanager (<code>nmcli</code>) for its network interfaces. Below you will find a few commands for common network tasks.</p> <p>Show connections:   <code>nmcli con show</code></p> <p>Delete the default connection (\"Wired connection 1\") and set up a static connection called <code>static-eth0</code> with an IP of 172.20.1.100, a netmask of 255.255.0.0 and a gateway of 172.20.2.100:   <pre><code>sudo nmcli c delete \"Wired connection 1\"\nsudo nmcli c add con-name static-eth0 ifname eth0 type ethernet ip4 172.20.1.20/16 gw4 172.20.2.100\nsudo nmcli c up static-eth0\n</code></pre></p> <p>Change IP address of <code>static-eth0</code> connection to <code>192.168.1.4/16</code>:   <pre><code>sudo nmcli con mod static-eth0 ipv4.address 192.168.1.1/16\n</code></pre></p> <p>Change gateway of <code>static-eth0</code> connection to <code>192.168.1.1</code>:   <pre><code>sudo nmcli con mod static-eth0 ipv4.gateway 192.168.1.1\n</code></pre></p> <p>Change dns of <code>static-eth0</code> connection to <code>8.8.8.8</code>:      <pre><code>sudo nmcli con mod static-eth0 ipv4.dns \"8.8.8.8\"\n</code></pre></p> <p>Take down/up of <code>static-eth0</code>:     <pre><code>sudo nmcli con down static-eth0\nsudo nmcli con up static-eth0\n</code></pre> Delete <code>static-eth0</code> connection:   <pre><code>sudo nmcli c delete \"static-eth0\"\n</code></pre></p> <p>Add new connection called <code>static-eth0</code> with IP <code>172.20.2.22/16</code> and gateway <code>172.20.2.100</code>:   <pre><code>sudo nmcli c add con-name static-eth0 ifname eth0 type ethernet ip4 172.20.2.22/16 gw4 172.20.2.100\n</code></pre></p> <p>Add a persistent route so that multicast traffic to 224.x.x.x goes to the <code>static-eth0</code> connection: <pre><code>sudo nmcli con mod static-eth0 +ipv4.routes \"224.0.0.0/8\"\n</code></pre></p> <p>Change eth0 to enable remove static IP and enable DHCP (In this case, it would make more sense to delete the connection since it is named <code>static-eth0</code> and call it something else, but for edification: <pre><code>sudo nmcli con mod static-eth0 ipv4.address \"\"\nsudo nmcli con mod static-eth0 ipv4.method auto\nsudo nmcli con down static-eth0\nsudo nmcli con up static-eth0\n</code></pre></p>"},{"location":"echopilot_ai/#interfacing-the-jetson-to-the-autopilot","title":"Interfacing the Jetson to the Autopilot","text":"<p>The autopilot has a high-speed serial interface between the STM32H7 and the Jetson SOM. The Jetson UART1 (pins 203, 205) are connected to the autopilot's USART3 (Typically Telem2). To enable MAVLink data, you will need to check and/or modify PX4/Ardupilot parameters to ensure that Telem2 is set to MAVLink and set the baud rate to the desired value. A typical baud rate is 500,000 but you can use any baud rate you wish as long as the application receiving MAVLink on the Jetson is configured to match. </p> <p>On the Jetson side, UART1 is typically <code>/dev/ttyTHS2</code>.</p> <p>There are many options available for MAVLink routing and handling. One typical application is routing the MAVLink data over a network - and MAVLink Router is a popular open-source solution. To use MAVLink Router to route MAVLink packets from UART1 (/dev/ttyTHS2) to a UDP endpoint (192.168.1.10:14550) on the network, use the following command:</p> <pre><code>$ mavlink-routerd -e 192.168.1.10:14550 /dev/ttyTHS2:5000000\n</code></pre> <p>If you have issues accessing <code>/dev/ttyTHSX</code>, please disable <code>nvgetty</code> and ensure you are a member of the <code>dialout</code> group: <pre><code>sudo systemctl stop nvgetty\nsudo systemctl disable nvgetty\nsudo usermod -aG dialout $USER\n</code></pre></p> <p>Note</p> <p>Reboot to apply changes.</p>"},{"location":"echopilot_ai/#can-termination","title":"CAN Termination","text":"<p>The 2 CAN connections from the FMU (CAN1 and CAN2) and the 1 from the Jetson are driven by LTC2875 transceivers and contain termination resistors at the drivers. Should you desire to remove these termination resistors (e.g., you want to place the EchoPilot AI in the middle of a CAN chain rather than at the end), refer to the following:  </p> CAN Resistor Label Notes FMU CAN1 R19 and R156 Near U4 and U45, size 0402, see important info below FMU CAN2 R9 Near U3, size 0402 JETSON CAN1 R95 Near U32 (Rev1+ only), size 0402 <p>Note</p> <p>FMU CAN1 default configuration provides connectivity between the FMU and the RemoteID system. Therefore, two CAN transceivers with termination resistors are installed by default. If you wish to use CAN1 with the EchoPilot at the END of the chain, remove R156. If you wish to use the EchoPilot in the MIDDLE of a chain, remove both R19 and R156. </p>"},{"location":"echopilot_ai/#remote-id-subsystem","title":"Remote ID Subsystem","text":"<p>The Remote ID system is based on an ESP32-C3 and is designed to work with the ArduRemoteID project and Open Drone ID standards.</p> <p>ArduRemoteID is is an implementation of a MAVLink and DroneCAN OpenDroneID transmitter. It aims to provide a transmitter solution for the FAA standard RemoteID requirement, meeting the transmitter component of the ASTM F3586-22 Means of Compliance. It also aims to be compliant with the RemoteID regulation in the EU.</p> <p>It is the responsibility of the user to configure the ArduRemoteID firmware in a way that it is compliant with the local RemoteID regulation. For instance, in the USA it is mandatory that UAV manufacturers submit a DoC (Declaration of Conformance) to the FAA where they state that their product is compliant with the RemoteID regulation.</p> <p>To flash ArduRemote ID to the ESPS32-C3, you will need a TC2030-USB-NL cable from tag-connect.com and follow the flashing instructions from the AruRemoteID project.</p> <p>To configure the Remote ID system, parameters can be accessed from DroneCAN (via Mission Planner or DroneCAN GUI) or with MAVLink. To use DroneCAN, SLCAN will need to be enabled to allow the autopilot to connect to the CANBUS through USB.  </p> <p>For making changes to DroneCAN devices, see the instructions here. The FMU is connected to the ESP32-C3 via CAN1, with the default configuration providing termination resistors at both the FMU side and ESP32 side.</p>"},{"location":"echopilot_ai_pinout/","title":"EchoPilot AI Pinout","text":""},{"location":"echopilot_ai_pinout/#echopilot-ai-pinout","title":"EchoPilot AI Pinout","text":""},{"location":"echopilot_ai_pinout/#top-side-echopilot-ai","title":"Top Side EchoPilot AI","text":""},{"location":"echopilot_ai_pinout/#debug-power-in-j8","title":"Debug Power In (J8)","text":"<p>This connector is not normally used. It exists only to power the EchoPilot AI without a carrier board attached.</p> <p>Connector: J8, Part Number: B2B-XH-A(LF)(SN) Mating Connector: XHP-2</p> Pin Number Direction Voltage Pin Description PIN 1 Pwr GND Ground PIN 2 Pwr IN +5.2V Debug Power"},{"location":"echopilot_ai_pinout/#fmu-debug-j12","title":"FMU Debug (J12)","text":"<p>This connector is not normally used by the customer. It is primarily used during board setup to load bootloader firmware on the FMU. It is however possible to use the UART7 lines for other purposes.</p> <p>Connector: J12, Part Number: SM06B-SRSS-TB(LF)(SN) Mating Connector: SHR-06V-S-B</p> Pin Number Direction Voltage Pin Description PIN 1 Pwr OUT +3.3V 3.3V Power PIN 2 O +3.3V FMU UART7 TX PIN 3 I +3.3V FMU UART7 RX PIN 4 IO +3.3V FMU SWDIO PIN 5 O +3.3V FMU SWCLK PIN 6 Pwr GND Gnd"},{"location":"echopilot_ai_pinout/#esp32-remote-id-programdebug-j11","title":"ESP32 (Remote ID) Program/Debug (J11)","text":"<p>This connector is used to flash new firmware to the ESP32 for the RemoteID subsystem.</p> <p>Connector: J11, Part Number: NA Mating Connector/Cable: Tag Connect TC2030-USB-NL</p> Pin Number Direction Voltage Pin Description PIN 1 NA NA NC PIN 2 NA NA NC PIN 3 IO Diff Signal USB D- PIN 4 IO Diff Signal USB D+ PIN 5 Pwr GND Gnd PIN 6 NA NA NC"},{"location":"echopilot_ai_pinout/#fan-j38","title":"FAN (J38)","text":"<p>This connector is used to connect the fan from active heatsinks from ConnectTech.com</p> <p>Connector: J38, Part Number: 0530470410 Mating Connector: 0510210400</p> Pin Number Direction Voltage Pin Description PIN 1 Pwr GND Gnd PIN 2 Pwr OUT +5V Fan Power PIN 3 I +5V Fan Tachometer Signal PIN 4 O +5V Fan PWM Signal"},{"location":"echopilot_ai_pinout/#fmu-usb-j7","title":"FMU USB (J7)","text":"<p>This is a USB-C connector following USB 2.0 specifications. It provides access to the autopilot (FMU) via the main STM32H7 processor. Connect to this port for configuation of the autopilot or autopilot firmware updates.</p> <p>Connector: J7, Part Number: 12401610E4#2A Mating Connector: Standard USB-C cable. Does not need to be USB 3 compliant.</p>"},{"location":"echopilot_ai_pinout/#jetson-usb-31-ss-j31","title":"Jetson USB 3.1 SS (J31)","text":"<p>This is a USB-C connector following USB 3.1 SS specifications. This provides a high-speed USB connection to the Jetson SOM. We recommended using this connector for 4G/5G modems, USB drives or other peripherals needing high speed access. For lower-speed peripherals, 4 USB 2.0 ports are available on the Carrier Board.</p> <p>Connector: J31, Part Number: 12401610E4#2A Mating Connector: USB-C 3.1 compliant cable.</p>"},{"location":"echopilot_ai_pinout/#bottom-side-echopilot-ai","title":"Bottom Side EchoPilot AI","text":""},{"location":"echopilot_ai_pinout/#board-to-board-jetson-j5","title":"Board to Board Jetson (J5)","text":"<p>This connector handles the Jetson-related board to board signals between the EchoPilot AI and a carrier board.</p> <p>Connector: J5, Part Number: FX23L-80S-0.5SV Mating Connector: FX23L-80P-0.5SV8 (8mm standoff, also available in 10 and 12mm)  </p> <p></p> Pin Number Direction Voltage Pin Desription 1 I 3.3V Jetson Console RX 2 O 3.3V Jetson Console TX 3 Pwr GND GND 4 IO 1.8V CAM0_SDA0 5 IO 1.8V CAM0_SCL0 6 IO 1.8V CAM0_MCLK 7 IO 1.8V CAM0_GPIO 8 Pwr GND GND 9 IO Diff Signal CAM0_D1+ 10 IO Diff Signal CAM0_D1- 11 Pwr GND GND 12 IO Diff Signal CAM0_CLK+ 13 IO Diff Signal CAM0_CLK- 14 Pwr GND GND 15 IO Diff Signal CAM0_D0+ 16 IO Diff Signal CAM0_D0- 17 Pwr GND GND 18 IO 1.8V CAM1_SDA0 19 IO 1.8V CAM1_SCL0 20 IO 1.8V CAM1_MCLK 21 IO 1.8V CAM1_GPIO 22 Pwr GND GND 23 IO Diff Signal CAM1_D1+ 24 IO Diff Signal CAM1_D1- 25 Pwr GND GND 26 IO Diff Signal CAM1_CLK+ 27 IO Diff Signal CAM1_CLK- 28 Pwr GND GND 29 IO Diff Signal CAM1_D0+ 30 IO Diff Signal CAM1_D0- 31 Pwr GND GND 32 IO 1.8V I2S0_DOUT 33 IO 1.8V I2SO_DIN 34 IO 1.8V I2SO_FS 35 IO 1.8V I2SO_SCLK 36 IO 1.8V AUDIO_MCLK 37 IO 1.8V GPIO12 38 IO 1.8V GPIO10 39 Pwr GND GND 40 O 3.3V IRIDIUM RX UART 41 IO Diff Signal ETH1 TX- 42 IO Diff Signal ETH1 TX+ 43 IO Diff Signal ETH1 RX- 44 IO Diff Signal ETH1 RX+ 45 Pwr GND GND 46 IO Diff Signal ETH2 RX+ 47 IO Diff Signal ETH2 RX- 48 IO Diff Signal ETH2 TX+ 49 IO Diff Signal ETH2 TX- 50 Pwr GND GND 51 IO 3.3V JETSON I2C1_SDA 52 IO 3.3V JETSON I2C1_SCL 53 NA NA NC 54 NA NA NC 55 NA NA NC 56 Pwr GND GND 57 Pwr 5V VBUS5 58 IO Diff Signal USB_4 D+ 59 IO Diff Signal USB_4 D- 60 Pwr GND GND 61 Pwr 5V VBUS4 62 IO Diff Signal USB_3 D+ 63 IO Diff Signal USB_3 D- 64 Pwr GND GND 65 Pwr 5V VBUS3 66 IO Diff Signal USB_2 D+ 67 IO Diff Signal USB_2 D- 68 Pwr GND GND 69 Pwr OUT 5V VBUS2 70 IO Diff Signal USB_1 D+ 71 IO Diff Signal USB_1 D- 72 Pwr GND GND 73 I 3.3V IRIDIUM NA 74 I 3.3V IRIDIUM RING 75 I 3.3V IRIDIUM TX UART 76 O 3.3V IRIDIUM ON/OFF 77 Pwr OUT 1.8 +1.8V OUT 78 Pwr OUT 1.8 +1.8V OUT 79 Pwr OUT 3.3 +3.3V OUT 80 Pwr OUT 3.3 +3.3V OUT 81 Pwr IN 5.1 +5.1V 82 Pwr IN 5.1 +5.1V 83 Pwr GND GND 84 Pwr GND GND"},{"location":"echopilot_ai_pinout/#board-to-board-fmu-j6","title":"Board to Board FMU (J6)","text":"<p>This connector handles the FMU-related board to board signals between the EchoPilot AI and a carrier board.</p> <p>Connector: J5, Part Number: FX23L-80S-0.5SV Mating Connector: FX23L-80P-0.5SV8 (8mm standoff, also available in 10 and 12mm)  </p> <p></p> Pin Number Direction Voltage Pin Desription 1 0 3.3V FMW PWM CH6 2 O 3.3V FMW PWM CH5 3 O 3.3V FMW PWM CH4 4 O 3.3V FMW PWM CH3 5 O 3.3V FMW PWM CH2 6 O 3.3V FMW PWM CH1 7 O 3.3V IO PWM CH1 8 O 3.3V IO PWM CH2 9 O 3.3V IO PWM CH3 10 O 3.3V IO PWM CH4 11 O 3.3V IO PWM CH5 12 O 3.3V IO PWM CH6 13 O 3.3V IO PWM CH7 14 O 3.3V IO PWM CH8 15 Pwr GND GND 16 Pwr GND GND 17 Pwr OUT +5V +5V OUT  (PROTECTED) 18 O 3.3V FMU I2C_2 SCL 19 IO 3.3V FMU I2C_2 SDA 20 Pwr GND GND 21 Pwr OUT +5V +5V OUT (PROTECTED) 22 IO Diff Signal CAN 2+ 23 IO Diff Signal CAN 2- 24 Pwr GND GND 25 Pwr OUT +5V +5V OUT (PROTECTED) 26 IO Diff Signal CAN 1+ 27 IO Diff Signal CAN 1- 28 Pwr GND GND 29 Pwr OUT +5V +5V OUT (PROTECTED) 30 O +3.3V TELEM1_RTS 31 I +3.3V TELEM1_CTS 32 I +3.3V TELEM1_RX 33 O +3.3V TELEM1_TX 34 Pwr GND GND 35 I 3.3V BATTERY CURRENT SENSE 36 I 3.3V BATTERY VOLTAGE SENSE 36 Pwr GND GND 38 I +3.3V +VSERVO SENSE 39 Pwr GND GND 40 NA NA NC 41 Pwr OUT Pwr +5V OUT (PROTECTED) 42 O +3.3V SPI5 SCLK 43 I +3.3V SPI5 MISO 44 I Diff Signal SPI5_MOSI 45 O +3.3V SPI5 CS1  (PI4) 46 O +3.3V SPI5 CS2 (PI10) 47 Pwr GND GND 48 Pwr OUT +5V +5V OUT (PROTECTED) 49 O +3.3V GPS1 TX 50 I +3.3V GPS1 RX 51 O 3.3V FMU I2C_1 SCL 52 IO 3.3V FMU I2C_1 SDA 53 Pwr GND GND 54 I +3.3V SAFETY SWITCH IN 55 O +3.3V SAFETY SWITCH LED OUT 56 Pwr OUT +3.3V +3.3V OUT (SAFETY) 57 O +5V BUZZER OUT 58 Pwr GND GND 59 Pwr OUT +5V +5 VOUT (PROTECTED) 60 I +3.3V RC INPUT 61 Pwr GND GND 62 Pwr IN +5.4V +5.4V IN FMU 63 Pwr IN +5.4V +5.4V IN FMU 64 Pwr IN +5.4V +5.4V IN FMU 65 Pwr IN +5.4V +5.4V IN FMU 66 Pwr GND GND 67 Pwr GND GND 68 Pwr GND GND 69 Pwr GND GND 70 I +3.3V VDD POWER A VALID 71 I +3.3V VDD POWER B VALID 72 O +3.3V SBUS OUTPUT 73 O 3.3V FMU UART4 TX 74 I 3.3V FMU UART4 RX 75 Pwr GND GND 76 NA NA NC 77 NA NA NC 78 NA NA NC 79 NA NA NC 80 NA NA NC 81 Pwr IN +5.1V +5.1V (JETSON POWER) 82 Pwr IN +5.1V +5.1V (JETSON POWER) 83 Pwr GND GND 84 Pwr GND GND"},{"location":"echopilot_ai_pinout/#io-debug-j13","title":"IO Debug (J13)","text":"<p>This connector is not normally used by the customer. It is used during board setup to load bootloader firmware on the IOMCU.</p> <p>Connector: J13, Part Number: SM06B-SRSS-TB(LF)(SN) Mating Connector: SHR-06V-S-B</p> Pin Number Direction Voltage Pin Description PIN 1 Pwr Out +3.3V 3.3V Power PIN 2 O +3.3V IOMCU UART1 TX PIN 3 I +3.3V IOMCU UART1 RX PIN 4 IO +3.3V IOMCU SWDIO PIN 5 O +3.3V IOMCU SWCLK PIN 6 Pwr GND Gnd"},{"location":"echopilot_ai_pinout/#jetson-debug-j25","title":"Jetson Debug (J25)","text":"<p>This connector is used to flash new firmware to the Jetson SOM.</p> <p>Connector: J25, Part Number: SM04B-GHS-TB(LF)(SN) Mating Connector: GHR-04V-S</p> Pin Number Direction Voltage Pin Description PIN 1 Pwr In +5.0V VBus PIN 2 IO Diff Signal USB D- PIN 3 IO Diff Signal USB D+ PIN 4 Pwr GND Gnd"},{"location":"echopilot_carrier_pinout/","title":"EchoPilot Carrier Pinout","text":"<p>The Carrier Board is open-source, please visit the echopilot_ai_carrier repository. While you may refer to the pinout information below, also feel free to examine the pdf schematic or the full design in Kicad 6.0+.  </p>"},{"location":"echopilot_carrier_pinout/#carrier-board-schematic","title":"Carrier Board Schematic","text":"<p>A full schematic of the carrier board is available: PDF schematic </p>"},{"location":"echopilot_carrier_pinout/#top-side-carrier-board","title":"Top Side Carrier Board","text":""},{"location":"echopilot_carrier_pinout/#iridium-rockblock-9603-j10","title":"Iridium Rockblock 9603 (J10)","text":"<p>This connector is for connection to a Rockblock Iridium 9603 modem. A straight-through cable with Molex 0510211000 connectors may be used. </p> <p>Connector: J10, Part Number: 0532617010 Mating Connector:  0510211000</p> Pin Number Direction Voltage Pin Desription 1 Pwr GND GND 2 NA NA NC 3 Pwr OUT +5V +5V (unprotected) 4 O 3.3V Iridium On/Off 5 I 3.3V TX (from modem's perspective) 6 I 3.3V Iridium Ring 7 I 3.3V Iridium Network Available 8 NA NA NC 9 NA NA NC 10 O 3.3V RX (from modem's perspective) <p>Note</p> <p>Custom software is required to implement Iridium SBD communications. Pinmux modifications may be required pending how a software implementation leverages the Iridium modem IO.</p>"},{"location":"echopilot_carrier_pinout/#ethernet-2-j9","title":"Ethernet 2 (J9)","text":"<p>This connector is used for Ethernet (100 Mbps to the Jetson). This is connected to a KSZ8795CLXIC 4-port ethernet switch onboard the EchoPilot AI.</p> <p>Note</p> <p>The magnetics for Ethernet 2 are onboard the Carrier Board.</p> <p>Connector: J9, Part Number: SM04B-GHS-TB(LF)(SN) Mating Connector: GHR-04V-S</p> Pin Number Direction Voltage Pin Description 1 IO Diff Signal Rx+ 2 IO Diff Signal Rx- 3 IO Diff Signal Tx+ 4 IO Diff Signal Tx-"},{"location":"echopilot_carrier_pinout/#ethernet-1-j15","title":"Ethernet 1 (J15)","text":"<p>This connector is used for Ethernet (100 Mbps to the Jetson). This is connected to a KSZ8795CLXIC 4-port ethernet switch onboard the EchoPilot AI.</p> <p>Note</p> <p>The magnetics for Ethernet 1 are onboard the Carrier Board.</p> <p>Connector: J15, Part Number: SM04B-GHS-TB(LF)(SN) Mating Connector: GHR-04V-S</p> Pin Number Direction Voltage Pin Description 1 IO Diff Signal Rx+ 2 IO Diff Signal Rx- 3 IO Diff Signal Tx+ 4 IO Diff Signal Tx-"},{"location":"echopilot_carrier_pinout/#board-to-board-jetson-j5","title":"Board to Board Jetson (J5)","text":"<p>This connector handles the Jetson-related board to board signals. It connects to the EchoPilot AI board.  </p> <p>Connector: J5, Part Number: FX23L-80P-0.5SV8 Mating Connector: FX23L-80S-0.5SV  </p> Pin Number Direction Voltage Pin Desription 1 I 3.3V Jetson Console RX 2 O 3.3V Jetson Console TX 3 Pwr GND GND 4 IO 1.8V CAM0_SDA0 5 IO 1.8V CAM0_SCL0 6 IO 1.8V CAM0_MCLK 7 IO 1.8V CAM0_GPIO 8 Pwr GND GND 9 IO Diff Signal CAM0_D1+ 10 IO Diff Signal CAM0_D1- 11 Pwr GND GND 12 IO Diff Signal CAM0_CLK+ 13 IO Diff Signal CAM0_CLK- 14 Pwr GND GND 15 IO Diff Signal CAM0_D0+ 16 IO Diff Signal CAM0_D0- 17 Pwr GND GND 18 IO 1.8V CAM1_SDA0 19 IO 1.8V CAM1_SCL0 20 IO 1.8V CAM1_MCLK 21 IO 1.8V CAM1_GPIO 22 Pwr GND GND 23 IO Diff Signal CAM1_D1+ 24 IO Diff Signal CAM1_D1- 25 Pwr GND GND 26 IO Diff Signal CAM1_CLK+ 27 IO Diff Signal CAM1_CLK- 28 Pwr GND GND 29 IO Diff Signal CAM1_D0+ 30 IO Diff Signal CAM1_D0- 31 Pwr GND GND 32 IO 1.8V I2S0_DOUT 33 IO 1.8V I2SO_DIN 34 IO 1.8V I2SO_FS 35 IO 1.8V I2SO_SCLK 36 IO 1.8V AUDIO_MCLK 36 IO 1.8V GPIO12 38 IO 1.8V GPIO10 39 Pwr GND GND 40 O 3.3V IRIDIUM RX UART 41 IO Diff Signal ETH0 TX- 42 IO Diff Signal ETH0 TX+ 43 IO Diff Signal ETH0 RX- 44 IO Diff Signal ETH0 RX+ 45 Pwr GND GND 46 IO Diff Signal ETH2 RX+ 47 IO Diff Signal ETH2 RX- 48 IO Diff Signal ETH2 TX+ 49 IO Diff Signal ETH2 TX- 50 Pwr GND GND 51 IO 3.3V JETSON I2C1_SDA 52 IO 3.3V JETSON I2C1_SCL 53 NA NA NC 54 NA NA NC 55 NA NA NC 56 Pwr GND GND 57 Pwr OUT 5V VBUS5 58 IO Diff Signal USB5 D+ 59 IO Diff Signal USB5 D- 60 Pwr GND GND 61 Pwr OUT 5V VBUS4 62 IO Diff Signal USB4 D+ 63 IO Diff Signal USB4 D- 64 Pwr GND GND 65 Pwr 5V VBUS3 66 IO Diff Signal USB3 D+ 67 IO Diff Signal USB3 D- 68 Pwr GND GND 69 Pwr OUT 5V VBUS2 70 IO Diff Signal USB2 D+ 71 IO Diff Signal USB2 D- 72 Pwr GND GND 73 I 3.3V IRIDIUM NA 74 I 3.3V IRIDIUM RING 75 I 3.3V IRIDIUM TX UART 76 O 3.3V IRIDIUM ON/OFF 77 Pwr OUT 1.8 +1.8V OUT 78 Pwr OUT 1.8 +1.8V OUT 79 Pwr OUT 3.3 +3.3V OUT 80 Pwr OUT 3.3 +3.3V OUT 81 Pwr IN 5.1 +5.1V 82 Pwr IN 5.1 +5.1V 83 Pwr GND GND 84 Pwr GND GND"},{"location":"echopilot_carrier_pinout/#pwm-output-from-fmu-j28","title":"PWM Output from FMU (J28)","text":"<p>This connector provides the PWM outputs from the FMU. The EchoPilot AI's autopilot hardware consist of a main processor (FMU) and an IO processor. The IO processor provides 8 PWM outputs (labeled IO CHX below) and the FMU provides 4 PWM outputs. An important distinction between the two is that only the FMU outputs are D-Shot compatible.  </p> <p>The +VServo Sense input is optional and is used by the FMU to detect a drop in the VServo rail. The EchoPilot AI has a 2:1 voltage divider onboard to protect input of up to 6.6V (3.3V * 2). This is an input only, the Carrier board does not provide power to the servo voltage rail. </p> <p>The EchoPilot AI comes with a PWM Breakout board which allows users to use standard Futaba-style (3 pin, 0.1\" spacing) servo connectors. The PWM Breakout Board is plugged into this connector with the supplied cable. </p> <p>Connector: J28, Part Number: SM14B-GHS-TB(LF)(SN) Mating Connector: GHR-14V-S</p> Pin Number Direction Voltage Pin Description 1 O +3.3 IO CH1 2 O +3.3 IO CH2 3 O +3.3 IO CH3 4 O +3.3 IO CH4 5 O +3.3 IO CH5 6 O +3.3 IO CH6 7 O +3.3 IO CH7 8 O +3.3 IO CH8 9 O +3.3 FMU CH1 10 O +3.3 FMU CH2 11 O +3.3 FMU CH3 12 O +3.3 FMU CH4 13 I +5V +VServo Sense (Optional) 14 Pwr GND GND"},{"location":"echopilot_carrier_pinout/#board-to-board-fmu-j6","title":"Board to Board FMU (J6)","text":"<p>This connector handles the FMU-related board to board signals.  It connects to the EchoPilot AI board.  </p> <p>Connector: J6, Part Number: FX23L-80P-0.5SV8 Mating Connector: FX23L-80S-0.5SV   </p> Pin Number Direction Voltage Pin Desription 1 O 3.3V FMU PWM CH6 2 O 3.3V FMU PWM CH5 3 O 3.3V FMU PWM CH4 4 O 3.3V FMU PWM CH3 5 O 3.3V FMU PWM CH2 6 O 3.3V FMU PWM CH1 7 O 3.3V IO PWM CH1 8 O 3.3V IO PWM CH2 9 O 3.3V IO PWM CH3 10 O 3.3V IO PWM CH4 11 O 3.3V IO PWM CH5 12 O 3.3V IO PWM CH6 13 O 3.3V IO PWM CH7 14 O 3.3V IO PWM CH8 15 Pwr GND GND 16 Pwr GND GND 17 Pwr OUT +5V +5V OUT_11 18 O 3.3V FMU I2C_2 SCL 19 IO 3.3V FMU I2C_2 SDA 20 Pwr GND GND 21 Pwr OUT +5V +5V OUT_11 22 IO Diff Signal CAN 2+ 23 IO Diff Signal CAN 2- 24 Pwr GND GND 25 Pwr OUT +5V +5V OUT_11 26 IO Diff Signal CAN 1+ 27 IO Diff Signal CAN 1- 28 Pwr GND GND 29 Pwr OUT +5V +5V OUT_11 30 O +3.3V TELEM1_RTS 31 I +3.3V TELEM1_CTS 32 I +3.3V TELEM1_RX 33 O +3.3V TELEM1_TX 34 Pwr GND GND 35 I 3.3V BATTERY CURRENT SENSE 36 I 3.3V BATTERY VOLTAGE SENSE 36 Pwr GND GND 38 I +3.3V +VSERVO SENSE 39 Pwr GND GND 40 NA NA NC 41 Pwr OUT Pwr +5V OUT_11 42 O +3.3V SPI5 SCLK 43 I +3.3V SPI5 MISO 44 I Diff Signal SPI5_MOSI 45 O +3.3V SPI5 CS1  (PI4) 46 O +3.3V SPI5 CS2 (PI10) 47 Pwr GND GND 48 Pwr OUT +5V 5V OUT_11 49 O +3.3V GPS1 TX 50 I +3.3V GPS1 RX 51 O 3.3V FMU I2C_1 SCL 52 IO 3.3V FMU I2C_1 SDA 53 Pwr GND GND 54 I +3.3V SAFETY SWITCH IN 55 O +3.3V SAFETY SWITCH LED OUT 56 Pwr OUT +3.3V +3.3V OUT 57 O +5V BUZZER OUT 58 Pwr GND GND 59 Pwr OUT +5V +5V OUT_22 60 I +3.3V RC INPUT 61 Pwr GND GND 62 Pwr IN +5.4V +5.4V IN FMU 63 Pwr IN +5.4V +5.4V IN FMU 64 Pwr IN +5.4V +5.4V IN FMU 65 Pwr IN +5.4V +5.4V IN FMU 66 Pwr GND GND 67 Pwr GND GND 68 Pwr GND GND 69 Pwr GND GND 70 I +3.3V VDD POWER A VALID 71 I +3.3V VDD POWER B VALID 72 O +3.3V SBUS OUTPUT 73 O 3.3V FMU UART4 TX 74 I 3.3V FMU UART4 RX 75 Pwr GND GND 76 NA NA NC 77 NA NA NC 78 NA NA NC 79 NA NA NC 80 NA NA NC 81 Pwr IN +5.1V +5.1V (JETSON POWER) 82 Pwr IN +5.1V +5.1V (JETSON POWER) 83 Pwr GND GND 84 Pwr GND GND"},{"location":"echopilot_carrier_pinout/#5v-out-j11","title":"+5V Out (J11)","text":"<p>This connector provides a spare regulated +5V output. It is protected by a reverse polarity diode and a self-resetting fuse (060#L100SLYR)  </p> <p>Connector: J11, Part Number: SM02B-GHS-TB(LF)(SN) Mating Connector: GHR-02V-S   </p> Pin Number Direction Voltage Pin Description 1 Pwr OUT +5V +5V (Fused at 1A) 2 Pwr GND GND"},{"location":"echopilot_carrier_pinout/#vbattery-j12","title":"+VBattery (J12)","text":"<p>This connector provides a spare raw battery voltage output (what is input to J27, XT30 power in). It is protected by a reverse polarity diode.</p> <p>Connector: J12, Part Number: SM02B-GHS-TB(LF)(SN) Mating Connector: GHR-02V-S   </p> Pin Number Direction Voltage Pin Description 1 Pwr OUT +VBATT +VBATT (unprotected) 2 Pwr OUT +VBATT +VBATT (unprotected) 3 Pwr GND GND 4 Pwr GND GND"},{"location":"echopilot_carrier_pinout/#gpscompass-j20","title":"GPS/Compass (J20)","text":"<p>This connector provides a Pixhawk standard GPS/Compass connection.</p> <p>Connector: J20, Part Number: SM10B-GHS-TB(LF)(SN) Mating Connector: GHR-10V-S   </p> Pin Number Direction Voltage Pin Description 1 Pwr OUT +5V +5V OUT_11 2 O +3.3V GPS TX 3 I +3.3V GPS Rx 4 O +3.3V I2C 1 SCL 5 IO +3.3V I2C 1 SDA 6 I +3.3V Safety Switch In 7 O +3.3V Safety Switch LED Out 8 Pwr OUT +3.3V Safety VDD 3.3V 9 Pwr +5V Buzzer Out 10 Pwr GND GND"},{"location":"echopilot_carrier_pinout/#radio-in-j16","title":"Radio In (J16)","text":"<p>This connector provides a optional radio input in to the autopilot. A wide range of radio protocols are supported. Please see here for example.</p> <p>Connector: J16, Part Number: SM03B-GHS-TB(LF)(SN)  Mating Connector: GHR-03V-S   </p> Pin Number Direction Voltage Pin Description 1 I +3.3V RC In 2 Pwr OUT +5V +5V OUT_22 3 Pwr GND GND"},{"location":"echopilot_carrier_pinout/#power-in-j27","title":"Power In (J27)","text":"<p>This connector provides power input to the system. The power supply should be between 7-56 VDC and should be capable of supply up to 4A.</p> <p>Connector: J27, Part Number: XT30PW-M Mating Connector: XT30U-F  </p> Pin Number Direction Voltage Pin Description 1 Pwr GND GND 2 Pwr IN +7-56VDC +V System Input"},{"location":"echopilot_carrier_pinout/#bottom-side-carrier-board","title":"Bottom Side Carrier Board","text":""},{"location":"echopilot_carrier_pinout/#mipi-cam-2-j14","title":"MIPI Cam 2 (J14)","text":"<p>This connector provides a CSI/MIPI Camera connection, following the Raspberry Pi 15-pin 1mm spacing FFC standard.</p> <p>Connector: J14, Part Number: 1-84952-5 Mating Connector: FFC Cable, 15 pos, 1mm pin spacing   </p> Pin Number Direction Voltage Pin Description 1 Pwr GND GND 2 IO Diff Signal CAM1_D0- 3 IO Diff Signal CAM1_D0+ 4 Pwr GND GND 5 IO Diff Signal CAM1_D1- 6 IO Diff Signal CAM1_D1+ 7 Pwr GND GND 8 O Diff Signal CAM1_CLK- 9 O Diff Signal CAM1_CLK+ 10 Pwr GND GND 11 IO +3.3V CAM1_GPIO 12 O +3.3V CAM1_MCLK 13 O +3.3V CAM1_SCL0 14 IO +3.3V CAM1_SDAO 15 Pwr OUT +3.3V +3.3V"},{"location":"echopilot_carrier_pinout/#mipi-cam-1-j8","title":"MIPI Cam 1 (J8)","text":"<p>This connector provides a CSI/MIPI Camera connection, following the Raspberry Pi 15-pin 1mm spacing FFC standard.</p> <p>Connector: J8, Part Number: 1-84952-5 Mating Connector: FFC Cable, 15 pos, 1mm pin spacing   </p> Pin Number Direction Voltage Pin Description 1 Pwr GND GND 2 IO Diff Signal CAM0_D0- 3 IO Diff Signal CAM0_D0+ 4 Pwr GND GND 5 IO Diff Signal CAM0_D1- 6 IO Diff Signal CAM0_D1+ 7 Pwr GND GND 8 O Diff Signal CAM0_CLK- 9 O Diff Signal CAM0_CLK+ 10 Pwr GND GND 11 IO +3.3V CAM0_GPIO 12 O +3.3V CAM0_MCLK 13 O +3.3V CAM0_SCL0 14 IO +3.3V CAM0_SDAO 15 Pwr OUT +3.3V +3.3V"},{"location":"echopilot_carrier_pinout/#jetson-console-j7","title":"Jetson Console (J7)","text":"<p>This is a USB-C connector following USB 2.0 specifications. An FTDI USB to UART IC ((FT231XQ-R) is used to provide UART access to the Jetson. The FTDI chip is powered by the USB bus.</p> <p>Connector: J7, Part Number: 12401610E4#2A Mating Connector: Standard USB-C cable. Does not need to be USB 3 compliant.</p>"},{"location":"echopilot_carrier_pinout/#can-2-fmu-j17","title":"CAN 2 (FMU) (J17)","text":"<p>This connector provides a Pixhawk standard CAN connection from the FMU (CAN 2).</p> <p>Connector: J7, Part Number: SM04B-GHS-TB(LF)(SN) Mating Connector: GHR-04V-S     </p> Pin Number Direction Voltage Pin Description 1 Pwr OUT +5V +5V OUT_1 1 2 IO Diff Signal CAN_2+ (FMU) 3 IO Diff Signal CAN_2- (FMU) 4 Pwr GND GND"},{"location":"echopilot_carrier_pinout/#telem1-j18","title":"Telem1 (J18)","text":"<p>This connector provides a Pixhawk standard TELEM connection from the FMU (TELEM1).</p> <p>Connector: J18, Part Number: SM06B-GHS-TB(LF)(SN) Mating Connector: GHR-06V-S     </p> Pin Number Direction Voltage Pin Description 1 Pwr OUT +5V +5V OUT_1 1 2 O +3.3V Telem1 TX 3 I +3.3V Telem1 RX 4 O +3.3V Telem1 CTS 5 I +3.3V Telem1 RTS 6 Pwr GND GND"},{"location":"echopilot_carrier_pinout/#i2c-2-fmu-j25","title":"I2C 2 (FMU) (J25)","text":"<p>This connector provides a Pixhawk standard I2C connection from the FMU (I2C 2).</p> <p>Connector: J25, Part Number: SM04B-GHS-TB(LF)(SN) Mating Connector: GHR-04V-S     </p> Pin Number Direction Voltage Pin Description 1 Pwr OUT +5V +5V OUT_1 1 2 O +3.3V I2C_2 SCL (FMU) 3 IO +3.3V I2C_2 SDA (FMU) 4 Pwr GND GND"},{"location":"echopilot_carrier_pinout/#sbus-outrssi-in-j26","title":"S.Bus Out/RSSI In (J26)","text":"<p>This connector can be used for either S.BUS Output or RSSI Input.</p> <p>Connector: J26, Part Number: SM03B-GHS-TB(LF)(SN) Mating Connector: GHR-03V-S     </p> Pin Number Direction Voltage Pin Description 1 I +3.3V S.Bus Out / RSSI In 2 Pwr OUT +5V +5V OUT_1 1 3 Pwr GND GND"},{"location":"echopilot_carrier_pinout/#vi-sense-j13","title":"V/I Sense (J13)","text":"<p>This connector provides voltage and current sense input, for use with an off-board current sensor monitor. These signals should be scaled to 0-3.3V or damage may occur. Your autopilot firmware will allow you to enter scaling factors for proper display of voltage/current on a GCS system. </p> <p>Connector: J13, Part Number: SM03B-GHS-TB(LF)(SN) Mating Connector: GHR-03V-S     </p> Pin Number Direction Voltage Pin Description STM32 Pin 1 I +3.3V Voltage Sense PA0 2 I +3.3V Current Sense PA1 3 Pwr GND GND NA"},{"location":"echopilot_carrier_pinout/#can-1-fmu-j19","title":"CAN 1 (FMU) (J19)","text":"<p>This connector provides a Pixhawk standard CAN connection from the FMU (CAN 1).</p> <p>Connector: J19, Part Number: SM04B-GHS-TB(LF)(SN) Mating Connector: GHR-04V-S     </p> Pin Number Direction Voltage Pin Description 1 Pwr OUT +5V +5V OUT_1 1 2 IO Diff Signal CAN_1+ (Jetson) 3 IO Diff Signal CAN_1- (Jetson) 4 Pwr GND GND"},{"location":"echopilot_carrier_pinout/#usb4-j24","title":"USB4 (J24)","text":"<p>This connector provides USB 2.0 connectivity from the Jetson SOM.</p> <p>Connector: J24, Part Number: SM04B-GHS-TB(LF)(SN) Mating Connector: GHR-04V-S     </p> Pin Number Direction Voltage Pin Description 1 Pwr OUT +5V +5V VBUS (Protected 500mA) 2 IO Diff Signal USB4_D- (Jetson) 3 IO Diff Signal USB4_D+ (Jetson) 4 Pwr GND GND"},{"location":"echopilot_carrier_pinout/#usb3-j23","title":"USB3 (J23)","text":"<p>This connector provides USB 2.0 connectivity from the Jetson SOM.</p> <p>Connector: J23, Part Number: SM04B-GHS-TB(LF)(SN) Mating Connector: GHR-04V-S     </p> Pin Number Direction Voltage Pin Description 1 Pwr OUT +5V +5V VBUS (Protected 500mA) 2 IO Diff Signal USB3_D- (Jetson) 3 IO Diff Signal USB3_D+ (Jetson) 4 Pwr GND GND"},{"location":"echopilot_carrier_pinout/#usb2-j22","title":"USB2 (J22)","text":"<p>This connector provides USB 2.0 connectivity from the Jetson SOM.</p> <p>Connector: J22, Part Number: SM04B-GHS-TB(LF)(SN) Mating Connector: GHR-04V-S     </p> Pin Number Direction Voltage Pin Description 1 Pwr OUT +5V +5V VBUS (Protected 500mA) 2 IO Diff Signal USB2_D- (Jetson) 3 IO Diff Signal USB2_D+ (Jetson) 4 Pwr GND GND"},{"location":"echopilot_carrier_pinout/#usb1-j21","title":"USB1 (J21)","text":"<p>This connector provides USB 2.0 connectivity from the Jetson SOM.</p> <p>Connector: J21, Part Number: SM04B-GHS-TB(LF)(SN) Mating Connector: GHR-04V-S     </p> Pin Number Direction Voltage Pin Description 1 Pwr OUT +5V +5V VBUS (Protected 500mA) 2 IO Diff Signal USB1_D- (Jetson) 3 IO Diff Signal USB1_D+ (Jetson) 4 Pwr GND GND"},{"location":"echopilot_carrier_pinout/#jetson-console-j29","title":"Jetson Console (J29)","text":"<p>This is a USB-C connector following USB 2.0 specifications. An FTDI USB to UART IC (FT231XQ-R) is used to provide UART access to the optional VectorNav INS. The FTDI chip is powered by the USB bus.</p> <p>Connector: J29, Part Number: 12401610E4#2A Mating Connector: Standard USB-C cable. Does not need to be USB 3 compliant.</p> <ol> <li> <p>5V_OUT1 bus is limited to a total of 500mA.\u00a0\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9</p> </li> <li> <p>5V_OUT2 bus is limited to a total of 500mA.\u00a0\u21a9\u21a9</p> </li> </ol>"},{"location":"echopilot_pwm_pinout/","title":"EchoPilot PWM Pinout","text":""},{"location":"echopilot_pwm_pinout/#echopilot-pwm-breakout-board-pinout","title":"EchoPilot PWM Breakout Board Pinout","text":""},{"location":"echopilot_pwm_pinout/#jst-to-echopilot-connector","title":"JST to EchoPilot Connector","text":"<p>This connector is used along with the provided cable to connect to J20 on the Carrier Board.</p> <p>Connector: J1, Part Number: SM14B-SRSS-TB(LF)(SN) Mating Connector: SHR-14V-S-B</p> Pin Number Direction Voltage Pin Description PIN 1 Pwr GND GND PIN 2 Pwr +5V +VServo Sense PIN 3 O +3.3V FMU (AUX) PWM CH4 PIN 4 O +3.3V FMU (AUX) PWM CH3 PIN 5 O +3.3V FMU (AUX) PWM CH2 PIN 6 O +3.3V FMU (AUX) PWM CH1 PIN 7 O +3.3V IO (MAIN) PWM CH8 PIN 8 O +3.3V IO (MAIN) PWM CH7 PIN 9 O +3.3V IO (MAIN) PWM CH6 PIN 10 O +3.3V IO (MAIN) PWM CH5 PIN 11 O +3.3V IO (MAIN) PWM CH4 PIN 12 O +3.3V IO (MAIN) PWM CH3 PIN 13 O +3.3V IO (MAIN) PWM CH2 PIN 14 O +3.3V IO (MAIN) PWM CH1"},{"location":"echopilot_pwm_pinout/#header-pwm-outputs","title":"Header PWM Outputs","text":"<p>This header is used to connect to Futaba-style servo connectors. The PWM outputs are broken up into two groups. To understand why, consider that the autopilot is based on two separate ICs: a primary controller (often referred to as \"the\" FMU) and an IO controller (IOMCU). The IOMCU provides the PWM output to MAIN CH1 - CH8, while the FMU directly handles AUX CH1 - CH4. The naming convention of MAIN and AUX come from previous Pixhawk designs, where the IOMCU outputs are historically (confusingly?) labeled \"MAIN.\" The outputs directly from the FMU are historically named \"AUX.\" At this point you might be asking yourself \"why do we need to ICs, this seems to just add confusion?\" There are two reasons why the EchoPilot uses an IOMCU (many autopilots do not): 1. It allows us to support up to 14 PWM outputs and 2. It provides a level of safety and redundancy because the IOMCU can allow core functionality (RC Control) even if the primary FMU fails or crashes. </p> <p>For most applications either group of outputs can be used. However, one important consideration between \"MAIN\" and \"AUX\" outputs are if you are using DShot if your system. DShot outputs are only supported by the FMU, therefore on the EchoPilot AI only the AUX outputs support DShot. With the stock Carrier board and PWM breakout board, 4 AUX outputs are available. The EchoPilotAI supports up to 6 AUX outputs via custom carrier board design.</p> <p>Warning</p> <p>The middle (\"+\") pin is bussed together, allowing you to distribute your +VServo voltage. The EchoPilot AI does NOT provide +VServo voltage, this must be supplied by an external regulator, BEC, etc. Typically +VServo is provided by an Electronic Speed Controller (ESC) in the system.</p> <p>Connector: J2, Part Number: TSW-112-08-G-T-RA_1 Mating Connector: Standard 0.1\" spacing servo/esc Futaba style</p> <p></p>"}]}