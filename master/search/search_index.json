{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"EchoMAV Documentation","text":"<p>Welcome to the EchoMAV Technical Library for the Donington product. Please find the quick links below to get started:</p> <p>Product Documentation </p>"},{"location":"donington/","title":"EchoPilot AI Documentation","text":""},{"location":"donington/#overview","title":"Overview","text":"<p>The EchoPilot AI is a highly integrated vehicle control and edge computing system designed to power next-generation uncrewed systems. The EchoPilot AI supports computer vision, machine learning, autonomy, artificial intelligence and other advanced edge computing needs. The EchoPilot AI implements a STM32H7-based autopilot compatible with the popular Ardupilot and PX4 projects, and uses Pixhawk open-hardware connectivity standards. </p> <p>The power of  an advanced autopilot is seamlessly combined with high-performance computing (including AI and machine learning), IP networking, cloud connectivity and flexible low-latency hardware accelerated video encoding.</p> <p></p> <p>Autopilot Sensors</p> Function Part Number IMU 1 ICM42688P IMU 2 ICM42688P IMU 3 ICM42688P Barometer 1 ICP-20100 Barometer 2 ICP-20100 Magnetometer PNI RM3100 Add-On INS Standalone modules only via RS-232 <p>The hardware is configured into a two board stack. The upper board is the EchoPilot AI board, and it contains the flight management unit, peripherals, sensors and Nvidia Jetson interface. The lower board is the Carrier Board, and it handles power regulation and provides connector breakouts and additional peripheral connectivity (e.g. support for a Cellular modem). Two high-density FX23L-80S-0.5SV 80-pin board-to-board connectors are used between the two boards. There is 10mm between boards.</p> <p>This design philosophy achieves multiple goals :</p> <ol> <li>For integrated vehicle solutions, it is often desired to design a custom carrier board to add additional components, minimize cables/wiring and integrate power distribution. The EchoPilot AI's design allows you to optionally design a custom carrier board (using the provided Carrier Board as a reference design).</li> <li>A stacked solution minimizes X-Y size in exchange for moving into the Z axis, which is an acceptable compromise for most uncrewed vehicles.</li> <li>Moving the switching power regulators to the Carrier board reduces noise near the sensitive sensors on EchoPilot AI board and reduces the thermal load of the EchoPilot AI mainboard.</li> <li>A stacked design is more future proof, as peripherals can often be added to the Carrier Board without a re-design of the EchoPilot AI main board.</li> </ol>"},{"location":"donington/#quick-start-guide","title":"Quick Start Guide","text":""},{"location":"donington/#accessing-the-jetson-via-the-console","title":"Accessing the Jetson via the console","text":"<p>If you included a Jetson SOM in your purchase, it will have been flashed and tested at the factory. If you have a new Jetson module that is not flashed, please see XavierNX,  Orinx NX and Orin Nano, and Nano instructions.</p> <p>Warning</p> <p>Do not run the Jetson SOM without a heat sink. The module may be damaged or the performance throttled. EchoMAV offers a variety of heat sink solutions for the Jetson modules, See EchoPilot AI Accessories for recommended active and passive heat sinks. Other solutions are available from a variety of third party manufacturers. </p> <ol> <li>Assemble the EchoPilot AI board with a Carrier Board, using 10mm standoffs between the two boards.</li> <li>If a Jetson Module is not already installed in the EchoPilot AI, install the module now by sliding the Jetson in at a 45 degree angle, then pressing down until in snaps in place. Use Qty 2 M.2 x 6mm screws to secure the Jetson module.</li> <li>Attached a USB cable between your host computer and J15 (Console) on the EchoPilot AI Board </li> <li>In step 3, your host computer should have enumerated a virtual comm port. You will now need to find the name of the port.</li> </ol> <p>Info</p> <p>On Windows: Open Device Manager (Start \u2192 Control Panel \u2192 Hardware and Sound \u2192 Device Manager) Look in the Device Manager list, open the category \"Ports\", and note the COM port added USB Serial Port (COM?) (e.g., COM10). On Linux: Run <code>dmesg -w</code> and then plug in unplug and replug in the USB cable. You should see the name of the device added, typically <code>FTDI USB Serial device converter now attached to ttyUSB?</code> (e.g., ttyUSB0). </p> <p>Use a terminal program to connect to the Jetson's console at 115200 baud, 8N1. </p> <p>Info</p> <p>On Windows: We recommend Putty or TeraTerm. On Linux: We recommend Picocom. Install with <code>sudo apt-get install picocom</code>. Use with <code>picocom /dev/ttyUSB? -b 115200</code>. To exit picocom, use <code>Ctrl-a Ctrl-x</code>.</p> <p>Power the Carrier Board with 7-56VDC source capable of supplying up to 4A.</p> <p>Warning</p> <p>If using a bench supply with over-current protection, we recommend turning it OFF. The boot process requires short bursts of high current and over-current protection on some supplies will result in a failed boot. In most cases, if the Jetson fails to boot it is due to a poor power supply.</p> <p>You should now see the boot messages in your console, and once boot is complete, you will see a login prompt.</p> <p>Note</p> <p>The default username is echopilot and the default password is echopilot</p> <p>Success</p> <p>At this point you are logged into the Jetson and can begin configuring the network, installing applications, etc.</p>"},{"location":"donington/#connecting-to-the-fmu-via-the-usb-connector","title":"Connecting to the FMU via the USB connector","text":"<ol> <li>Attach a USB cable between the host computer and the FMU USB connector (J7).</li> <li>Start a ground control application on the host computer such as QGroundControl or Mission Planner.</li> </ol> <p>Info</p> <p>QGroundControl: Will automatically connect. Mission Planner: Select the appropriate COM port at the top right, 115200, then click CONNECT.</p>"},{"location":"donington/#streaming-telemetry-over-the-network","title":"Streaming telemetry over the network","text":"<p>EchoMAV provisions Jetson modules at the factory to be set to a static IP address, and a few default software applications are installed including mavlink-router and a web-based user interface. mavlink-router is an open source tool used to receive telemetry from the autopilot via a serial port and stream it to an IP endpoint (10.223.1.10:14550 over UDP by default). This software installation is open source and you are free to review the installation scripts or reinstall the  software using the instructions here. The instructions below assume the Jetson module installed in your EchoPilot AI hardware has been provisioned using our software installation and static IP configuration.</p> <p>Default telemetry will stream to <code>10.223.1.10:14550</code> using UDP (client mode). This will allow automatic connection to common Ground Control Stations including QGroundControl and Mission Planner. For this to work, your host computer must be set to <code>10.223.1.10</code> and the EchoPilot AI must have a network connection between one of the Ethenret ports and the host computer</p> <p>The telemetry endpoint can be easily changed by using the web UI at https://{IP_ADDRESS} (the recommendeded way), or more advanced users can use the command line by first gaining console access and then editing <code>\\etc\\mavlink-router\\main.conf</code>. For example:</p> <p><pre><code>[UdpEndpoint alpha]\nMode = Normal\nAddress = 10.223.1.10  #change to target IP address\nPort = 14550\n</code></pre> Then restart the mavlink-router service (or reboot) <pre><code>sudo systemctl restart mavlink-router\n</code></pre></p>"},{"location":"donington/#echopilot-ip-addressing","title":"EchoPilot IP Addressing","text":"<p>The EchoPilot AI will be labeled from the factory with a static IP address in the 10.223.0.0/16 subnet such as 10.223.134.126 (for example). If you do not know the IP address, you may be able to access the system using the backdoor/alias IP of 192.168.154.0/24. </p> <p>Using EchoMAV's software stack, the system's static IP address is calculated using the last two octets of the Jetson's <code>eth0</code> interface MAC address with a netmask of 255.255.0.0 (/16). For example, given the MAC address of 00:30:1A:4E:A4:3E, the last two octets 0xA4 and 0x3E are onverted from hex to decimal and then assigned as the last two octets of the IP address. In this example, this MAC address would correspond to 10.223.164.62/16 because 0xA4 = 164 and 0x3E = 62. This IP address is printed on the label from the factory.</p> <p>To access the Jetson module using IP, first set up your host computer to have a static IP address in the 10.223.0.0/16 subnet with any IP address OTHER than the address of the EchoPilot AI.</p> <p>Info</p> <p>On Windows: Open Device Manager (Windows Key + X \u2192 Press \"W\" \u2192 Click on \"Change adapter options\" \u2192 Right click, properties of the adapter connected to the EchoPilot AI \u2192 Highlight \"Internet Protocol Version 4 (TCP/IPv4) and click Properties ). Select \"Use the following IP address\" and configure the IP address and Subnet mask. Then click OK \u2192 Close.  </p> <p></p> <p>On Linux: Find the wired interface name, most typically this can be found using <pre><code>$ ip ad\nenp43s0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc fq_codel state DOWN group default qlen 1000\nlink/ether 34:73:5a:e8:57:3f brd ff:ff:ff:ff:ff:ff\n</code></pre> In the response above, the interface name is <code>enp43s0</code>. Use <code>nmcli</code> and the interface name found above set a static IP address (e.g. 10.223.1.10/16):  <pre><code>$ nmcli con add con-name \"static-eth\" ifname enp43s0 type ethernet ip4 10.223.1.10/16\n$ nmcli con up \"static-eth\"\n</code></pre> Now take down the other connections, for example a connection <code>ens32</code> is shown below: <pre><code>$ nmcli con show\nNAME         UUID                 TYPE           DEVICE\nenp43s0      ff9804db5-........   802-3-ethernet --\nstatic-eth   a4b59cb4a-........   802-3-ethernet ens32\n\n$ nmcli con down enp43s0\n</code></pre> Note that your device will likely lose internet access unless you happen to have a gateway on 10.223.x.x/16 subnet. To restore your default connection, use <code>nmcli</code> to take down the static connection and restore the original. For example: <pre><code>$ nmcli con down static-eth\n$ nmcli con up enp43s0\n</code></pre></p> <p>Note</p> <p>If you do not know the IP address of your system, you can use the configuration IP \"backdoor\" alias of 192.168.154.0/24 to access the system. Ensure your host system is in the 192.168.0.0/24 subnet (any valid IP address not equal to 192.168.154.0 will work). Please refer to the instructions above for how to change your host IP address.</p>"},{"location":"donington/#board-components-and-connectors","title":"Board Components and Connectors","text":""},{"location":"donington/#echopilot-ai-mainboard","title":"EchoPilot AI Mainboard","text":""},{"location":"donington/#carrier-board","title":"Carrier Board","text":""},{"location":"donington/#pinouts","title":"Pinouts","text":"<p>For EchoPilot AI Mainboard Pinouts, refer to the EchoPilot AI Pinout Page.  </p> <p>For Standard Carrier Board Pinouts, refer to the Carrier Board Pinout Page.</p>"},{"location":"donington/#jetson-io-availability","title":"Jetson IO Availability","text":"<p>The following Jetson IO pins are brought out to the B2B connector J5 and are available for customer use:</p> <p>Note</p> <p>*Changes to the direction and functionality of these pins may be possible based on the Jetson pinmux configuration.</p> Jetson Pin Direction B2B (J5) Voltage Default Use GPIO (Xavier) GPIO (Orin NX Orin Nano) PIN 218 IO 73 +3.3V* Iridium Ring GPIO3_PCC.04 GPIO3_PN.01 PIN 240 IO 39 +1.8V SLEEP/WAKE GPIO3_PEE.04 GPIO3_PEE.04 PIN 178 IO 38 +1.8V nMOD_SLEEP NA NA PIN 197 IO 40 +1.8V I2S0_FS GPIO3_PU.00 GPIO3_PI.02 PIN 124 IO 79 +1.8V GPIO O2 GPIO3_PQ.03 GPIO3_PP.06 PIN 195 IO 37 +1.8V IS20_DIN GPIO3_PT.07 GPIO3_PI.01 PIN 199 IO 76 +1.8V IS20_SCLK GPIO3_PT.05 GPIO3_PH.07 <p>Note</p> <p>*Pin 218 (Iridium Ring) is level-shifted from 1.8V to 3.3V prior to the B2B (J5) connector via a TXS0108ERGYR level translator.</p> <p>The following Jetson IO is used internally by the EchoPilot AI:</p> <p>Warning</p> <p>*Changes to the pinmux affecting these pins may break functionality.</p> Jetson Pin Direction Voltage Use Pin Description (Xavier) Pin Description (Nano) PIN 87 I +1.8V Vbus Detect USB_VBUS_EN0 USB_VBUS_EN0 PIN 130 O +1.8V Camera Mux GPIO3_PCC.03 GPIO3_PI.00 PIN 212 I +1.8V M2 Alert GPIO3_PQ.01 GPIO3_PV.01 <p>The following Jetson IO pins are brought out to the FAN (J38) connector:</p> Jetson Pin Direction Voltage Use Pin Description (Xavier) Pin Description (Nano) PIN 230 O +5V Fan PWM GPIO3_PH.01 GPIO3_PE.07 PIN 208 I +5V Fan Tachometer GPIO3_PQ.02 GPIO3_PZ.02"},{"location":"donington/#mechanical-drawings-and-step-files","title":"Mechanical Drawings and STEP Files","text":"With Carrier Board Attached EchoPilot AI without a Carrier Board Attached <p>EchoPilot AI 3D Model (STEP) File Download (right click, save link as)</p> <p>EchoPilot AI Universal Carrier Board 3D model (STEP) File Download (right click, save link as)</p> <p>EchoPilot AI PWM Breakout Board 3D model (STEP) File Download (right click, save link as)</p> <p>EchoPilot AI USB3 A Breakout Board 3D model (STEP) File Download (right click, save link as)</p>"},{"location":"donington/#vibration-isolation","title":"Vibration Isolation","text":"<p>Many commercial autopilots use foam vibration isolation on a daughterboard containing the IMUs. You'll notice the EchoPilot AI does not use this type of design and the IMUs are mounted directly to the circuit board. The reason for this is that we feel better vibration isolation can be achieved (if required) by leveraging the mass of the entire EchoPilot system (carrier board, main board and Jetson SOM) rather than the very small mass of an IMU daughterboard. For the types of vibrations encountered by large-prop multi-rotors and piston-based engines (50-90 Hz), the total mass of the EchoPilot system mounted on vibration silicone isolators or wire rope isolators are very effective. This design has the added benefits of protecting critical electronics from exposure to continuous vibrations.  </p> <p>An example of a typical vibration isolation mount is shown below:</p> <p> </p> EchoPilot AI Vibration Mount <p>Note</p> <p>Note that for small and medium multi-rotors and electric planes, electric quadplanes and other vehicle types, vibration isolation is very rarely needed. </p>"},{"location":"donington/#using-an-nvme-ssd","title":"Using an NVMe SSD","text":"<p>The EchoPilot AI includes an M.2 Key-M slot for a size 2230 NVMe SSD. We recommend a PCIe Gen. 4 NVMe SSD, such as the Western Digital SN740 (SDDPTQD-1T00), Western Digital Industrial Series (SDBPTPZ-1T00-XI) or Kingston OM3PGP41024P-A0 for applications in the 0-70\u00b0C range. Please be aware that most consumer NVMe SSDs have a commercial temperature rating (0-70\u00b0C). We recommend industrial rated devices for high-risk or high-valued use in uncrewed systems.</p> <p>The NVMe is power by a dedicated supply, 3A. </p> <p>To add an NVMe SSD to an EchoPilot system, first power off the system and install the SSD using a M2x3mm wafer head screw. </p> <p> </p> Install the 2230 NVMe drive and secure with an M2x3 wafer head screw <p>Power on the sytem and gain console access.</p> <p>Identify the NVMe SSD using: <pre><code>sudo fdisk -l\n</code></pre></p> <p>Create a partiaion table using: <pre><code>sudo parted /dev/nvme0n1 mklabel gpt\n</code></pre></p> <p>Create a new partition on the NVMe SSD: <pre><code>sudo parted -a optimal /dev/nvme0n1 mkpart primary ext4 0% 100%\n</code></pre></p> <p>Format the newly created partition: <pre><code>sudo mkfs.ext4 /dev/nvme0n1p\n</code></pre></p> <p>Create a mount point directory: <pre><code>sudo mkdir /mnt/nvme\n</code></pre></p> <p>Mount the NVMe SSD partition to the mount point directory: <pre><code>sudo mount /dev/nvme0n1p1 /mnt/nvme\n</code></pre></p> <p>Verify the NVMe SSD is mounted correctly by checking the file system: <pre><code>df -h\n</code></pre></p>"},{"location":"donington/#unique-board-identifier","title":"Unique Board Identifier","text":"<p>Each EchoPilot AI includes an AT24CS01-STUM unique ID EEPROM attached to the Jetson I2C 1 port at address 0x58. This can be used to obtain a unique 128-bit identifier (serial number) for your board. </p> <p>Below is an example python script you can use to read this serial number.</p> <p>First install python3 wih smbus <pre><code>sudo apt-get install python3-smbus\n</code></pre> Create a new file <code>serial.py</code> with these contents: <pre><code>import smbus\nimport sys\n\n# usage, pass the i2c bus as the first argument, e.g. python3 serial_number 0\n\ni2c_ch = int(sys.argv[1]) \n\n# address on the I2C bus\ni2c_address = 0x58\n\n# Register address\nserial_num = 0x80\n\n# Read serial number register\ndef read_serial():\n\n    # Read the serial register, a 16 byte block\n    val = bus.read_i2c_block_data(i2c_address, serial_num, 16)    \n    return val\n\n# Initialize I2C (SMBus)\nbus = smbus.SMBus(i2c_ch)\n\ntry:\n    # Print out the serial number\n    print(bytes(read_serial()).hex())\n\nexcept:\n    pass\n</code></pre> You can then run the script using below, where the argument is the system's i2c bus. This may vary from different Jetson modules, but will most often by 0 or 1. <pre><code>sudo python3 serial.py 0\n</code></pre></p>"},{"location":"donington/#configure-the-network","title":"Configure the Network","text":"<p>The EchoPilot AI has two 100Mbps Ethernet ports (ETH1 and ETH2). Upstream, these go to a network switch, so either one can be used to access the Jetson SOM. To interface using a standard RJ45 cable, use the included Ethernet adapter board and cable assembly connected as shown below. The make your own cable assembly, refer to the Pinout</p> <p> </p> To connect a standard RJ45 network cable, use the adapter as shown <p>EchoMAV's standard provisioning sets the Jetson module to a static IP address provided on the label with the device. There is also an alias ip of 192.168.253.0 which can be used if you do not know the static IP. </p>"},{"location":"donington/#configuring-for-dhcp","title":"Configuring for DHCP","text":"<p>If you wish to use DHCP, follow the instructions below:</p> <p>First gain console access via the USB connector. Once logged in via the console, modify the existing static connection (e.g. \"static-eth0\") to be DHCP: <pre><code>sudo nmcli con mod static-eth0 ipv4.method auto\nsudo nmcli con mod static-eth0 ipv4.gateway \"\"\nsudo nmcli con mod static-eth0 ipv4.address \"\"\nsudo nmcli con down static-eth0\nsudo nmcli con up static-eth0\n</code></pre> If the network connection is plugged into a DHCP server, the system will now get an IP address. You can confirm with:  <pre><code>ip addr\n</code></pre></p>"},{"location":"donington/#configuring-a-static-ip-address","title":"Configuring a Static IP Address","text":"<p>If you do not have a DHCP server, or you wish to assign a static IP address to the Jetson, follow the instructions below.</p> <p>First gain console access via the USB connector. Once logged in via the console, delete the default connection, for example \"Wired connection 1\": <pre><code>sudo nmcli c delete \"Wired connection 1\"\n</code></pre> Set up a static connection called <code>static-eth0</code> with an IP of 10.223.1.10, a netmask of 255.255.0.0 and a gateway of 10.223.1.1. The values are just examples, please adjust to the desired settings for your network. <pre><code>sudo nmcli c add con-name static-eth0 ifname eth0 type ethernet ip4 10.223.1.10/16 gw4 10.223.1.1\n</code></pre> Bring up the new interface <pre><code>sudo nmcli c up static-eth0\n</code></pre> To verify network connectivity, ping another device on the network, or to verify internet connectivity, ping a Google DNS server: <pre><code>ping 8.8.8.8\n</code></pre></p>"},{"location":"donington/#other-networkmanager-tips-and-tricks","title":"Other NetworkManager tips and tricks","text":"<p>Linux for Tegra uses networkmanager (<code>nmcli</code>) for its network interfaces. Below you will find a few commands for common network tasks. These examples are not intended for you to follow sequentially, these are common examples which will demonstrate most network configuration needs.</p> <p>Show connections:   <code>nmcli con show</code></p> <p>Example: Delete the default connection (\"Wired connection 1\") and set up a static connection called <code>static-eth0</code> with an IP of 172.20.1.100, a netmask of 255.255.0.0 and a gateway of 172.20.2.100:   <pre><code>sudo nmcli c delete \"Wired connection 1\"\nsudo nmcli c add con-name static-eth0 ifname eth0 type ethernet ip4 172.20.1.20/16 gw4 172.20.2.100\nsudo nmcli c up static-eth0\n</code></pre></p> <p>Example: Change IP address of <code>static-eth0</code> connection to <code>192.168.1.4</code> with a 255.255.0.0 (/16) netmask:   <pre><code>sudo nmcli con mod static-eth0 ipv4.address 192.168.1.1/16\n</code></pre></p> <p>Example: Change the gateway of <code>static-eth0</code> connection to <code>192.168.1.1</code>:   <pre><code>sudo nmcli con mod static-eth0 ipv4.gateway 192.168.1.1\n</code></pre></p> <p>Example: Change the DNS of <code>static-eth0</code> connection to <code>8.8.8.8</code>:      <pre><code>sudo nmcli con mod static-eth0 ipv4.dns \"8.8.8.8\"\n</code></pre></p> <p>Example: Take down/up of <code>static-eth0</code>:     <pre><code>sudo nmcli con down static-eth0\nsudo nmcli con up static-eth0\n</code></pre> Example: Delete the <code>static-eth0</code> connection:   <pre><code>sudo nmcli c delete \"static-eth0\"\n</code></pre></p> <p>Example: Add a new connection called <code>static-eth0</code> with IP <code>172.20.2.22/16</code> and gateway <code>172.20.2.100</code> on interface <code>eth0</code>:   <pre><code>sudo nmcli c add con-name static-eth0 ifname eth0 type ethernet ip4 172.20.2.22/16 gw4 172.20.2.100\n</code></pre></p> <p>Example: Add a persistent route so that multicast traffic to 224.x.x.x goes to the <code>static-eth0</code> connection: <pre><code>sudo nmcli con mod static-eth0 +ipv4.routes \"224.0.0.0/8\"\n</code></pre></p> <p>Example: Change the static-eth0 connection to remove static IP and enable DHCP (In this case, it would be clearer to delete the connection since it is named <code>static-eth0</code> and call it something else, but for edification: <pre><code>sudo nmcli con mod static-eth0 ipv4.address \"\"\nsudo nmcli con mod static-eth0 ipv4.gateway \"\"\nsudo nmcli con mod static-eth0 ipv4.method auto\nsudo nmcli con reload static-eth0\n</code></pre></p>"},{"location":"donington/#adding-wifi-to-the-echopilotai","title":"Adding WiFi to the EchoPilotAI","text":"<p>The instructions below provide details on how to get WiFi working using a TP-Link AC1300 (Archer T3U) wireless network adapter. These instructions were developed using Jetpack 35.4.1, running Linux Kernel 5.10. If you are usinng a newer version, you will need a different branch for the driver install. Please refer to the driver's readme.</p> <p>Connect the AC1300 to one of the USB3 connectors (J24 or J29 on the carrier board) using the provided cable and USB-A breakout board. </p>"},{"location":"donington/#clone-and-install-the-rtl8812bu-driver","title":"Clone and install the RTL8812BU driver","text":"<pre><code>cd /tmp\nsudo apt update\nsudo apt update\nsudo apt install -y build-essential dkms git bc\ngit clone -b v5.6.1 https://github.com/fastoe/RTL8812BU.git\ncd RTL8812BU\nmake\nsudo make install\nsudo reboot\n</code></pre>"},{"location":"donington/#verify-you-have-a-wlan0-device-present","title":"Verify you have a wlan0 device present","text":"<p><pre><code>iwconfig\n</code></pre> The output of this command should include wlan0, for example: <pre><code>lo        no wireless extensions.\ndummy0    no wireless extensions.\neth0      no wireless extensions.\nl4tbr0    no wireless extensions.\nrndis0    no wireless extensions.\nusb0      no wireless extensions.\nwlan0     IEEE 802.11AC  ESSID:\"EchoMAV\"  Nickname:\"&lt;WIFI@REALTEK&gt;\"\n          Mode:Managed  Frequency:5.24 GHz  Access Point: C8:9E:43:D5:C0:9C\n          Bit Rate:867 Mb/s   Sensitivity:0/0\n          Retry:off   RTS thr:off   Fragment thr:off\n          Power Management:off\n          Link Quality=72/100  Signal level=65/100  Noise level=0/100\n          Rx invalid nwid:0  Rx invalid crypt:0  Rx invalid frag:0\n          Tx excessive retries:0  Invalid misc:0   Missed beacon:0\n</code></pre></p>"},{"location":"donington/#use-nmcli-to-set-up-your-wireless-connection","title":"Use nmcli to set up your wireless connection","text":"<p>Replace SSID and PASSWORD below with your network information. <pre><code>sudo nmcli dev wifi connect &lt;SSID&gt; password &lt;PASSWORD&gt;\n</code></pre></p>"},{"location":"donington/#verify-the-connection","title":"Verify the connection","text":"<p>Using networkmanager, you should now see a connection NAME matching your WiFi SSID and it should be green indicating the connection is established. <pre><code>nmcli c s\n</code></pre> At this point, you have a WiFi connection. If your system still has a static network configuration, you may need to deactivate that connection or update your routing to ensure packets are routed over the new WiFi interface. For example, if you have an active static-eth0 interface, it can be deactivated using: <pre><code>sudo nmcli c d static-eth0\n</code></pre> You should now be routing internet packets via your WiFi connection. To check your connection speed, install and run Ookla's Speedtest tool: <pre><code>sudo apt-get install curl\ncurl -s https://packagecloud.io/install/repositories/ookla/speedtest-cli/script.deb.sh | sudo bash\nsudo apt-get install speedtest\n</code></pre> Check your download and upload speed: <pre><code>speedtest\n</code></pre></p>"},{"location":"donington/#configuring-can-on-the-jetson","title":"Configuring CAN on the Jetson","text":"<p>These instructions are a work in progress and may not be fully correct.  </p> <p>Modify <code>/etc/modprobe.d/denylist-mttcan.conf</code> and ensure the line <code>blacklist mttcan</code> is commented out. Reboot, then log in again and run <code>sudo modprobe mttcan</code>.</p>"},{"location":"donington/#streaming-telemetry-from-the-autopilot-detailed","title":"Streaming Telemetry from the Autopilot (Detailed)","text":"<p>The autopilot has a high-speed serial interface between the FMU/STM32H7 and the Jetson SOM. The Jetson UART1 (pins 203, 205) is connected to the autopilot's UART2. If EchoMAV has provisioned your board, or if you are using our Board Support Package, then the default parameters will be set automatically if you build the PX4 or Ardupilot firmware. However, to understand what parameters are used to enable MAVLink data flow between the FMU and Jetson, note the parameters used below. In both cases, you are enabling the autopilot serial port to receive MAVLink2 data and setting the baud rate to the appropriate value. A typical baud rate is <code>500000</code> kpbs, but you can use any baud rate you wish as long as the mavlink-router application sending/receiving MAVLink on the Jetson is configured to match. For factory provisioned devices, we set it to 500000.</p> <p>For example, on ArduPilot set the following params and reboot: <pre><code>SERIAL2_PROTOCOL: MAVLink2\nSERIAL2_BAUD: 500   ## 500,000 kbps\n</code></pre> For PX4, set the following params and reboot. <pre><code>MAV_1_CONFIG 102: Telem 2  ## Reboot after this change to expose additional parameters\nMAV_1_RATE: 0\nMAV_1_MODE 2: Onboard\nSER_TEL2_BAUD: 500000   ## Reboot after this change\n</code></pre></p> <p>On the Jetson side, UART1 is typically enumerated <code>/dev/ttyTHS0</code>, although it could vary with different Jetson modules including <code>/dev/ttyTHS1</code> and <code>/dev/ttyTHS2</code>.</p> <p>For using the EchoPilot AI to route MAVLink data over a network, we pre-install and recommend MAVLink Router. For modules configured at the factory, we now provide mavlink-router installed by default and is configured to push telemetry via UDP to <code>10.223.1.10:14550</code></p> <p>Should you need or want to install this independently, EchoMAV has an open-source installer which makes it easy to install MAVLink Router and configure it as a service which starts at boot. Please refer to the our installer repo https://github.com/EchoMAV/mavlink-router for instructions. </p> <p>If you use the install repo above, please refer to the instructions there for configuration of the UART and destination IP address. Specifically edit <code>etc\\mavlink-router\\main.conf</code> with the appropriate settings.</p> <p>If you have permission issues accessing <code>/dev/ttyTHSX</code>, please disable <code>nvgetty</code> and ensure you are a member of the <code>dialout</code> group, or just use our MAVLink Router Installer Repo along with <code>make install</code> and a reboot which sets these things up for you. Thes steps to disable <code>nvgetty</code> and add your account to the <code>dialout</code> group are shown below. <pre><code>sudo systemctl stop nvgetty\nsudo systemctl disable nvgetty\nsudo usermod -aG dialout $USER\n</code></pre></p> <p>Note</p> <p>Reboot to apply changes.</p>"},{"location":"donington/#fmu-ports","title":"FMU Ports","text":"<p>The Flight Manamgenent Unit (FMU) is based on the FMUv5 design, and uses I2C, SPI and UART ports as defined in the table below.</p> Port Use Connector Assignement USART1 External (GPS) Carrier Board J20 USART2 External/User (Telem1) Carrier Board J18 USART3 Telemetry to Jetson (Telem2) NA (internally routed) UART4 External/User (shifted to RS-232) Carrier Board J32 USART5 Not Used NA USART6 Remote ID NA (internal) UART7 External/User (Debug) EchoPilot J12 UART8 IO MCU NA (internal) SPI1 ICM42688P #1 and #2 NA (internal) SPI2 RM3100 and FRAM NA (internal) SPI3 Not Used NA SPI4 ICM42688P #3 and MS5611 #1 NA (internal) SPI5 Not Used NA SPI6 MS5611 #2 NA (internal) I2C1 GPS/Compass Carrier Board J20 I2C2 External/User Carrier Board J25 I2C3 Not Used NA I2C4 Not Used NA"},{"location":"donington/#uart-order","title":"UART Order","text":"<p>The default UART order for use for autopilot firmware is provided below. For example, SERIAL3 on Ardupilot is mapped to the GPS connector, SERIAL1 to the Telemetry connector, etc. </p> Port Name Function Port Connector SERIAL0 Console USB EchoPilot J7 SERIAL1 Telem1 USART2 Carrier Board J18 SERIAL2 Telem2 USART3 None (internally routed to Jetson) SERIAL3 GPS1 USART1 Carrier Board J20 SERIAL4 External INS (RS-232 shifted) UART4 Carrier Board J32 SERIAL5 Onboard Remote ID USART6 NA SERIAL6 Debug UART7 EchoPilot J12 <p>Please reference the EchoPilot AI's BSP firmware-specific board definition files for additional details related to board setup.</p>"},{"location":"donington/#can-termination","title":"CAN Termination","text":"<p>The 2 CAN connections from the FMU (CAN1 and CAN2) and the 1 from the Jetson are driven by LTC2875 transceivers and contain termination resistors at the drivers. Should you desire to remove these termination resistors (e.g., you want to place the EchoPilot AI in the middle of a CAN chain rather than at the end), refer to the following:  </p> CAN Resistor Label Notes FMU CAN1 R19 Near U4 and U45, size 0402 FMU CAN2 R9 Near U3, size 0402 JETSON CAN1 R95 Near U32, size 0402"},{"location":"donington/#battery-voltagecurrent-monitoring","title":"Battery Voltage/Current Monitoring","text":"<p>There are a wide variety of commercial voltage/current monitors which are compatiable with the EchoPilot. Examples of how to configure a few of them are provided below. Note that the EchoPilot AI carrier board does NOT include a current sensor because such a sensor needs to be placed directly after the system battery such that it can capture the both the total current output consumed by the motors/ESCs, radios, and other perpiherals in addition to the EchoPilot AI.</p>"},{"location":"donington/#digital-ouput","title":"Digital Ouput","text":"<p>Voltage/Current sensors which provide a digital output internface are commercially available. For example, the MATEKSYS CAN-L4-B provides voltage sensing up to 85V and current sensing from 0-204.8A and uses the CAN bus. To set up this device use the following parameters:</p> Parameter Value CAN_P1_DRIVER 1 (if attached to CAN bus1 port or CAN_P2_DRIVER = 1 if attached to CAN bus2 port) BATTx_MONITOR 8"},{"location":"donington/#analog-input-to-the-fmu-voltagecurrent-sense","title":"Analog Input to the FMU (Voltage/Current Sense)","text":"<p>The EchoPilot AI FMU design provides 6 analog inputs to the STM32H743. Often, these are used for voltage/current input for the battery systems onboard an uncrewed system. The Analog input pin mapping for each input is shown below. To use these inputs, change the parameters in ArduPilot or PX4 to the appropriate pins.</p> Input Name Carrier Board Connector STM32H743 Pin ArduPilot/PX4 Virtual Pin Voltage Sense 1 J13.2 PA0 16 Current Sense 1 J13.3 PA1 17 Voltage Sense 2 J13.4 PA2 14 Current Sense 2 J13.5 PA3 15 Spare ADC 1 J13.6 PC4 4 Spare ADC 2 J13.7 PA4 18"},{"location":"donington/#ardupilot-setup-for-analog-voltagecurrent-sense","title":"ArduPilot Setup for Analog Voltage/Current Sense","text":"<p>For example, the Common Power Module</p> Parameter Value BATT_MONITOR 4 BATT_VOLT_PIN 16 BATT_CURR_PIN 17 <p>If you wish to monitor two battiers, the additional analog inputs (J13.4 and J13.5) can be used with the parameters below: </p> Parameter Value BATT2_VOLT_PIN 14 BATT2_CURR_PIN 15 <p>The following parameters will need to be adjusted based on the specific Analog Voltage/Current Sensor used:</p> Parameter Value Notes BATT_AMP_PERVLT Dependent on Hardware The amps per volt scaling factor BATT_AMP_OFFSET Dependent on hardware The output voltage at zero amps BATT_VOL_MULT Dependent on hardware The scaling factor between the output voltage of the sensor and the true system voltage"},{"location":"donington/#px4-setup-for-analog-voltagecurrent","title":"PX4 Setup for Analog Voltage/Current","text":"Parameter Value BAT1_V_CHANNEL 16 BAT1_I_CHANNEL 17 BAT2_V_CHANNEL 14 BAT2_I_CHANNEL 15"},{"location":"donington/#remote-id-subsystem","title":"Remote ID Subsystem","text":"<p>The Remote ID system is based on an ESP32-C3 and is designed to work with the ArduRemoteID project and Open Drone ID standards.</p> <p>ArduRemoteID is is an implementation of a MAVLink and DroneCAN OpenDroneID transmitter. It aims to provide a transmitter solution for the FAA standard RemoteID requirement, meeting the transmitter component of the ASTM F3586-22 Means of Compliance. It also aims to be compliant with the RemoteID regulation in the EU.</p> <p>It is the responsibility of the user to configure the ArduRemoteID firmware in a way that it is compliant with the local RemoteID regulation. For instance, in the USA it is mandatory that UAV manufacturers submit a DoC (Declaration of Conformance) to the FAA where they state that their product is compliant with the RemoteID regulation.</p> <p>To flash ArduRemote ID to the ESPS32-C3, you will need a TC2030-USB-NL cable from tag-connect.com and follow the flashing instructions from the AruRemoteID project.</p> <p>The ESP32-C3 is connected to the FMU via UART6, aka Telem3 (pins PG9 (RX) and PG14 (TX) from the STM32H742). You will need to configure ArduPilot/PX4 to use this UART for RemoteID.</p> <p>For building ArduRemoteID for the EchoPilot AI, the following pins will need to be defined for the hardware: <pre><code>#define PIN_UART_TX 4\n#define PIN_UART_RX 5\nWS2812_LED_PIN GPIO_NUM_8\n</code></pre></p>"},{"location":"donington/#firmware-for-opendroneid","title":"Firmware for OpenDroneID","text":"<p>Special firmware is required for full integration of a Remote ID transmitter to add a layer of tamper-resistance as required by various countries initiatives. This is achieved by - Using a special board ID for ODID (OpenDroneID) firmware that will reject normal attempts of loading firmware without the necessary functions and parameters required for compliance. Any bootloader created with OpenDroneID capabilities also has firmware checking enabled such that it will not boot main firmware unless the board ids match. - Special READONLY parameters which can be set in the firmware during the compilation</p> <p>As such, if you wish to utilize Remote ID for your application, you will need to commpile firmware yourself or contact support@echomav.com for assistance. Please see the instructions here for additional information.</p>"}]}